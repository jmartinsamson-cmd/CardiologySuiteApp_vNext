name: Security & Quality Assurance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security audit weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

permissions:
  contents: read
  security-events: write

jobs:
  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit & Vulnerability Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for gitleaks to scan commit ranges

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for vulnerable packages
        run: |
          npm audit --json > audit-results.json 2>/dev/null || echo "{}" > audit-results.json

          # Check if jq is available
          if command -v jq &> /dev/null; then
            VULN_COUNT=$(jq -r '.metadata.vulnerabilities.total // 0' audit-results.json)
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "‚ö†Ô∏è  Security vulnerabilities detected: $VULN_COUNT"
              npm audit || true
            else
              echo "‚úÖ No vulnerabilities detected"
            fi
          else
            echo "‚ö†Ô∏è  jq not available, running basic audit check"
            npm audit --audit-level=moderate || echo "Audit completed with warnings"
          fi

      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7 # v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: ESLint Quality Check
        run: |
          echo "üîç Running ESLint security checks..."
          npm run lint
          if [ $? -ne 0 ]; then
            echo "‚ùå ESLint checks failed - code quality compromised"
            exit 1
          fi
          echo "‚úÖ ESLint checks passed - zero errors maintained"

      - name: TypeScript Type Checking
        run: |
          echo "üîç Running TypeScript checks..."
          npm run type-check || true

      - name: Validate Medical Data Integrity
        run: |
          echo "üè• Validating medical data integrity..."
          npm run validate:data:simple

  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Security Analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Check for package-lock changes
        run: |
          echo "üîí Verifying package-lock.json integrity..."
          if git diff --exit-code package-lock.json; then
            echo "‚úÖ Package-lock.json unchanged"
          else
            echo "‚ö†Ô∏è  Package-lock.json modified - review dependencies"
          fi

      - name: Dependency vulnerability scan
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        continue-on-error: true
        with:
          fail-on-severity: moderate

  medical-compliance:
    runs-on: ubuntu-latest
    name: Medical Data & HIPAA Compliance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for PHI/PII patterns
        run: |
          echo "üè• Scanning for potential PHI/PII exposure..."

          # Check for specific PHI patterns - refined to avoid false positives
          PHI_DETECTED=false

          # Check for Social Security Numbers (XXX-XX-XXXX format) in actual code/data
          if grep -r -E "ssn.*[0-9]{3}-[0-9]{2}-[0-9]{4}" src/ data/ 2>/dev/null || \
             grep -r -E "social.security.*[0-9]{3}-[0-9]{2}-[0-9]{4}" src/ data/ 2>/dev/null; then
            echo "‚ö†Ô∏è  SSN pattern detected!"
            PHI_DETECTED=true
          fi

          # Check for explicit patient data objects with real values (not templates)
          if grep -r -E '"patientId":\s*"[0-9]{6,}"' src/ data/ 2>/dev/null || \
             grep -r -E '"mrn":\s*"[0-9]{6,}"' src/ data/ 2>/dev/null; then
            echo "‚ö†Ô∏è  Patient identifier detected!"
            PHI_DETECTED=true
          fi

          # Check for actual patient names (firstname + lastname in quotes)
          if grep -r -E '"patientName":\s*"[A-Z][a-z]+\s+[A-Z][a-z]+"' src/ data/ 2>/dev/null; then
            echo "‚ö†Ô∏è  Patient name detected!"
            PHI_DETECTED=true
          fi

          # Check for phone numbers labeled as patient contact
          if grep -r -E '"(patientPhone|phoneNumber)":\s*"\(?[0-9]{3}\)?[-.\s]?[0-9]{3}[-.\s]?[0-9]{4}"' src/ data/ 2>/dev/null; then
            echo "‚ö†Ô∏è  Phone number detected!"
            PHI_DETECTED=true
          fi

          if [ "$PHI_DETECTED" = true ]; then
            echo "‚ùå Potential PHI detected in code or data files!"
            echo "Review and remove any patient identifiable information"
            exit 1
          fi
          echo "‚úÖ No PHI patterns detected - clinical terminology allowed"

      - name: Setup Node.js for validation
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies for validation
        run: npm ci

      - name: Validate medical data structure
        run: |
          echo "ü©∫ Validating medical data structure integrity..."
          node scripts/validate-json-simple.js

  file-integrity:
    runs-on: ubuntu-latest
    name: File Integrity & Change Detection

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate file checksums
        run: |
          echo "üîê Generating file integrity checksums..."
          find . -type f \( -name "*.js" -o -name "*.json" -o -name "*.css" \) | \
          grep -E "(src/|data/|styles/)" | \
          sort | xargs -r sha256sum > .file-checksums.txt 2>/dev/null || echo "Checksum generation completed"

      - name: Check critical file modifications
        run: |
          echo "üîç Checking for unauthorized modifications to critical files..."

          # List of critical files that should not be modified without review
          CRITICAL_FILES=(
            "package.json"
            "package-lock.json" 
            "eslint.config.js"
            "src/core/app.js"
            "data/cardiac_procedures.json"
          )

          for file in "${CRITICAL_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úì Critical file exists: $file"
            else
              echo "‚ö†Ô∏è  Critical file missing: $file"
            fi
          done

      - name: Archive checksums
        uses: actions/upload-artifact@v4
        with:
          name: file-integrity-checksums
          path: .file-checksums.txt
          retention-days: 90
