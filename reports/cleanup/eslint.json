[{"filePath":"/workspace/CardiologySuiteApp_vNext/data/validate_json.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/data/validate_json.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":70,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":71,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":71,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Data validation utility for Cardiology Suite\nasync function validateAndCleanJSON(text) {\n  // Remove potential BOM and normalize line endings\n  let cleaned = text\n    .replace(/^\\uFEFF/, \"\")\n    .replace(/\\r\\n/g, \"\\n\")\n    .replace(/\\r/g, \"\\n\");\n\n  // Fix common JSON syntax issues\n  cleaned = cleaned\n    // Fix unescaped quotes in strings\n    .replace(\n      /(?<!\\\\)\"([^\"]*?)\"/g,\n      (_, content) => `\"${content.replace(/\"/g, '\\\\\"')}\"`,\n    )\n    // Fix trailing commas\n    .replace(/,(\\s*[}\\]])/g, \"$1\")\n    // Fix missing quotes around property names\n    .replace(/([{,]\\s*)([a-zA-Z_][a-zA-Z0-9_]*)(\\s*:)/g, '$1\"$2\"$3');\n\n  try {\n    // Test if the cleaned JSON is valid\n    JSON.parse(cleaned);\n    return cleaned;\n  } catch (e) {\n    // If still invalid, try to locate the error\n    const lines = cleaned.split(\"\\n\");\n    let pos = 0;\n\n    // Extract position from error message\n    const match = e.message.match(/position (\\d+)/);\n    if (match) {\n      const errorPos = parseInt(match[1]);\n\n      // Find the line number and character\n      let lineNo = 0;\n      let charPos = 0;\n      for (let i = 0; i < lines.length; i++) {\n        if (pos + lines[i].length >= errorPos) {\n          lineNo = i + 1;\n          charPos = errorPos - pos;\n          break;\n        }\n        pos += lines[i].length + 1; // +1 for \\n\n      }\n\n      // Get context around the error\n      const context = [];\n      for (\n        let i = Math.max(0, lineNo - 3);\n        i < Math.min(lines.length, lineNo + 2);\n        i++\n      ) {\n        context.push(`${i + 1}: ${lines[i]}`);\n        if (i === lineNo - 1) {\n          // Add pointer to error position\n          context.push(\" \".repeat(charPos + 3) + \"^\");\n        }\n      }\n\n      throw new Error(\n        `JSON Syntax Error at line ${lineNo}, char ${charPos}:\\n${context.join(\"\\n\")}`,\n      );\n    }\n    throw e;\n  }\n}\n\n// Export function for use in other files\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports = { validateAndCleanJSON };\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/eslint.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/eslint.config.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import js from \"@eslint/js\";\nimport tsParser from \"@typescript-eslint/parser\";\nimport tsPlugin from \"@typescript-eslint/eslint-plugin\";\n\nlet sonarjs;\ntry {\n  const plugin = await import(\"eslint-plugin-sonarjs\");\n  sonarjs = plugin.default ?? plugin;\n} catch (error) {\n  const fallback = await import(\"./scripts/cleanup/sonarjs-stub.mjs\");\n  sonarjs = fallback.default ?? fallback;\n}\n\nexport default [\n  {\n    ignores: [\"node_modules/**\", \"dist/**\"],\n  },\n  js.configs.recommended,\n  {\n    files: [\"src/**/*.js\"],\n    languageOptions: {\n      ecmaVersion: \"latest\",\n      sourceType: \"module\",\n      globals: {\n        window: \"readonly\",\n        document: \"readonly\",\n        console: \"readonly\",\n        localStorage: \"readonly\",\n        fetch: \"readonly\",\n        setTimeout: \"readonly\",\n        setInterval: \"readonly\",\n        clearTimeout: \"readonly\",\n        clearInterval: \"readonly\",\n        location: \"readonly\",\n        navigator: \"readonly\",\n        alert: \"readonly\",\n        confirm: \"readonly\",\n        HTMLElement: \"readonly\",\n        CustomEvent: \"readonly\",\n        URLSearchParams: \"readonly\",\n        Blob: \"readonly\",\n        URL: \"readonly\",\n        performance: \"readonly\",\n        PerformanceObserver: \"readonly\",\n        module: \"readonly\",\n        // Browser runtime APIs used in src\n        requestAnimationFrame: \"readonly\",\n        AbortController: \"readonly\",\n        Worker: \"readonly\",\n        MessageChannel: \"readonly\",\n        SVGSVGElement: \"readonly\",\n        MutationObserver: \"readonly\",\n        Node: \"readonly\",\n      },\n    },\n    plugins: {\n      sonarjs,\n    },\n    rules: {\n      // Allow unused args if intentionally ignored via leading underscore\n      \"no-unused-vars\": [\"error\", { argsIgnorePattern: \"^_\", varsIgnorePattern: \"^_\" }],\n      \"sonarjs/no-dead-store\": \"warn\",\n    },\n  },\n  {\n    files: [\"scripts/**/*.js\", \"scripts/**/*.cjs\"],\n    languageOptions: {\n      ecmaVersion: \"latest\",\n      sourceType: \"module\",\n      globals: {\n        process: \"readonly\",\n        console: \"readonly\",\n        require: \"readonly\",\n        module: \"readonly\",\n        exports: \"readonly\",\n        __dirname: \"readonly\",\n        __filename: \"readonly\",\n        Buffer: \"readonly\",\n      },\n    },\n    plugins: {\n      sonarjs,\n    },\n    rules: {\n      \"no-unused-vars\": [\"error\", { argsIgnorePattern: \"^_\", varsIgnorePattern: \"^_\" }],\n      \"sonarjs/no-dead-store\": \"warn\",\n    },\n  },\n  // TypeScript in src (browser globals)\n  {\n    files: [\"src/**/*.ts\"],\n    languageOptions: {\n      parser: tsParser,\n      parserOptions: {\n        ecmaVersion: \"latest\",\n        sourceType: \"module\",\n      },\n      globals: {\n        window: \"readonly\",\n        document: \"readonly\",\n        console: \"readonly\",\n        localStorage: \"readonly\",\n        fetch: \"readonly\",\n        setTimeout: \"readonly\",\n        setInterval: \"readonly\",\n        clearTimeout: \"readonly\",\n        clearInterval: \"readonly\",\n        location: \"readonly\",\n        navigator: \"readonly\",\n        alert: \"readonly\",\n        confirm: \"readonly\",\n        HTMLElement: \"readonly\",\n        CustomEvent: \"readonly\",\n        URLSearchParams: \"readonly\",\n        Blob: \"readonly\",\n        URL: \"readonly\",\n        performance: \"readonly\",\n        PerformanceObserver: \"readonly\",\n        module: \"readonly\",\n        requestAnimationFrame: \"readonly\",\n        AbortController: \"readonly\",\n        Worker: \"readonly\",\n        MessageChannel: \"readonly\",\n        SVGSVGElement: \"readonly\",\n        MutationObserver: \"readonly\",\n        Node: \"readonly\",\n      },\n    },\n    plugins: {\n      \"@typescript-eslint\": tsPlugin,\n      sonarjs,\n    },\n    rules: {\n      ...tsPlugin.configs.recommended.rules,\n      \"@typescript-eslint/no-unused-vars\": [\n        \"error\",\n        { argsIgnorePattern: \"^_\", varsIgnorePattern: \"^_\" },\n      ],\n      \"sonarjs/no-dead-store\": \"warn\",\n    },\n  },\n  // TypeScript in scripts (Node globals)\n  {\n    files: [\"scripts/**/*.ts\"],\n    languageOptions: {\n      parser: tsParser,\n      parserOptions: {\n        ecmaVersion: \"latest\",\n        sourceType: \"module\",\n      },\n      globals: {\n        process: \"readonly\",\n        console: \"readonly\",\n        require: \"readonly\",\n        module: \"readonly\",\n        exports: \"readonly\",\n        __dirname: \"readonly\",\n        __filename: \"readonly\",\n        Buffer: \"readonly\",\n      },\n    },\n    plugins: {\n      \"@typescript-eslint\": tsPlugin,\n      sonarjs,\n    },\n    rules: {\n      ...tsPlugin.configs.recommended.rules,\n      \"@typescript-eslint/no-unused-vars\": [\n        \"error\",\n        { argsIgnorePattern: \"^_\", varsIgnorePattern: \"^_\" },\n      ],\n      \"sonarjs/no-dead-store\": \"warn\",\n    },\n  },\n];\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/mcp/ai-search-mcp-server.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":139,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":139,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":140,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":140,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":152,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":152,"endColumn":10}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\nimport process from 'node:process';\nimport express from 'express';\nimport { fetch } from 'undici';\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\nimport { ListToolsRequestSchema, CallToolRequestSchema } from '@modelcontextprotocol/sdk/types.js';\n\n// Proxy target: your ai-search backend\nconst BASE_URL = process.env.AI_SEARCH_BASE_URL || 'http://localhost:8081';\n// Mode: 'stdio' (default, for VS Code Copilot) or 'http' (SSE HTTP server)\nconst MODE = (process.env.MCP_MODE || 'stdio').toLowerCase();\n// HTTP SSE settings (for MODE=http)\nconst PORT = Number(process.env.MCP_HTTP_PORT || 8091);\nconst SSE_PATH = process.env.MCP_SSE_PATH || '/mcp/sse';\nconst POST_PATH = process.env.MCP_POST_PATH || '/mcp/messages';\n\nasync function doFetch(path, opts = {}) {\n  const url = path.startsWith('http') ? path : `${BASE_URL}${path}`;\n  const res = await fetch(url, {\n    ...opts,\n    headers: {\n      'content-type': 'application/json',\n      ...(opts.headers || {}),\n    },\n  });\n  if (!res.ok) {\n    const text = await res.text().catch(() => '');\n    throw new Error(`HTTP ${res.status} ${res.statusText}: ${text?.slice(0, 500)}`);\n  }\n  const ct = res.headers.get('content-type') || '';\n  if (ct.includes('application/json')) return res.json();\n  return res.text();\n}\n\nfunction buildServer() {\n  const server = new Server({ name: 'ai-search', version: '0.4.0' }, { capabilities: { tools: {} } });\n  server.setRequestHandler(ListToolsRequestSchema, async () => ({\n    tools: [\n      {\n        name: 'querySearchIndex',\n        description: 'Query the Azure AI Search index for cardiology content. Returns normalized hits.',\n        input_schema: {\n          type: 'object', additionalProperties: false,\n          properties: {\n            query: { type: 'string' },\n            top: { type: 'number' },\n            filters: { type: 'string' },\n            select: { type: 'array', items: { type: 'string' } },\n          }, required: ['query']\n        },\n      },\n      {\n        name: 'analyzeText',\n        description: 'Analyze a clinical note. Returns Assessment, Plan, citations, and meta.',\n        input_schema: {\n          type: 'object', additionalProperties: false,\n          properties: { note: { type: 'string' } }, required: ['note']\n        },\n      },\n      {\n        name: 'parseAzureNote',\n        description: 'Summarize and parse a cardiology note stored in Azure Blob Storage using GPT refinement.',\n        input_schema: {\n          type: 'object', additionalProperties: false,\n          properties: { container: { type: 'string' }, blob: { type: 'string' } },\n          required: ['container', 'blob']\n        },\n      },\n    ],\n  }));\n\n  server.setRequestHandler(CallToolRequestSchema, async (req) => {\n    const name = req.params?.name;\n    const args = /** @type {any} */ (req.params?.arguments) || {};\n\n    if (name === 'querySearchIndex') {\n      const q = String(args.query || '').trim();\n      if (!q) return { content: [{ type: 'text', text: 'Error: query is required' }] };\n      const top = Number.isFinite(args.top) ? Math.min(50, Math.max(1, Number(args.top))) : 10;\n      const filters = args.filters ? String(args.filters) : undefined;\n      const select = Array.isArray(args.select) ? args.select.filter(s => typeof s === 'string') : undefined;\n      const body = { q, top, skip: 0, select, filters };\n      const json = await doFetch('/search', { method: 'POST', body: JSON.stringify(body) });\n      const summary = { ok: !!json?.ok, count: json?.count ?? (json?.results?.length || 0), fields: select };\n      return { content: [ { type: 'text', text: `querySearchIndex results for \"${q}\" (top ${top}): ${summary.count}` }, { type: 'text', text: JSON.stringify(json, null, 2) } ] };\n    }\n\n    if (name === 'analyzeText') {\n      const note = String(args.note || '').trim();\n      if (!note) return { content: [{ type: 'text', text: 'Error: note is required' }] };\n      const json = await doFetch('/api/analyze-note', { method: 'POST', body: JSON.stringify({ note }) });\n      return { content: [ { type: 'text', text: 'Assessment and Plan generated by ai-search backend:' }, { type: 'text', text: JSON.stringify(json, null, 2) } ] };\n    }\n\n    if (name === 'parseAzureNote') {\n      const container = String(args.container || '').trim();\n      const blob = String(args.blob || '').trim();\n      if (!container || !blob) return { content: [{ type: 'text', text: 'Error: container and blob are required' }] };\n      const json = await doFetch('/parse', { method: 'POST', body: JSON.stringify({ container, blob }) });\n      return { content: [ { type: 'text', text: `parseAzureNote for ${container}/${blob}` }, { type: 'text', text: JSON.stringify(json, null, 2) } ] };\n    }\n\n    return { content: [{ type: 'text', text: `Unknown tool: ${name}` }] };\n  });\n\n  return server;\n}\n\nasync function main() {\n  if (MODE === 'http') {\n    const app = express();\n    app.use(express.json());\n    /** @type {Map<string, import('@modelcontextprotocol/sdk/dist/server/sse.js').SSEServerTransport>} */\n    const sessions = new Map();\n\n    app.get('/mcp/health', (_req, res) => res.json({ ok: true, mode: 'sse', post: POST_PATH, sse: SSE_PATH }));\n\n    app.get(SSE_PATH, async (_req, res) => {\n      try {\n        const transport = new SSEServerTransport(POST_PATH, res);\n        const server = buildServer();\n        await server.connect(transport);\n        sessions.set(transport.sessionId, transport);\n      } catch (e) {\n        res.status(500).type('text/plain').send(String(e?.message || e));\n      }\n    });\n\n    app.post(POST_PATH, async (req, res) => {\n      const sessionId = String(req.query.sessionId || '').trim();\n      const transport = sessionId ? sessions.get(sessionId) : undefined;\n      if (!transport) return res.status(404).type('text/plain').send('Unknown or missing session');\n      await transport.handlePostMessage(req, res);\n    });\n\n    app.listen(PORT, () => {\n      console.log(`[mcp] HTTP SSE server listening on http://localhost:${PORT}${SSE_PATH}`);\n      console.log(`[mcp] Proxying backend at ${BASE_URL}`);\n    });\n  } else {\n    // stdio mode for Copilot Chat\n    const server = buildServer();\n    const transport = new StdioServerTransport();\n    await server.connect(transport);\n    // Process will stay alive awaiting stdio from Copilot\n  }\n}\n\nmain().catch(err => {\n  console.error('[mcp] Fatal error:', err?.stack || err?.message || String(err));\n  process.exit(1);\n});\n \n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/pages/guidelines.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/pages/meds.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/analyze-imports.js","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":47,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":99,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":137,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/analyze-note.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/clean-data-jsons.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/baseline.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":24,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":27,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":28,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":32,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":33,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":58,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":58,"endColumn":8}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { execSync } from \"node:child_process\";\nimport { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst rootDir = path.resolve(__dirname, \"..\", \"..\");\nconst reportsDir = path.join(rootDir, \"reports\", \"cleanup\");\n\nfunction safeExec(command) {\n  try {\n    return execSync(command, { cwd: rootDir, encoding: \"utf8\" }).trim();\n  } catch (error) {\n    return `error: ${error.message}`;\n  }\n}\n\nconst baseline = {\n  generatedAt: new Date().toISOString(),\n  branch: safeExec(\"git rev-parse --abbrev-ref HEAD\"),\n  commit: safeExec(\"git rev-parse HEAD\"),\n  status: safeExec(\"git status -sb\"),\n  nodeVersion: process.version,\n  npmVersion: safeExec(\"npm --version\"),\n  platform: {\n    platform: process.platform,\n    arch: process.arch,\n    release: safeExec(\"uname -a\"),\n  },\n  env: {\n    NODE_ENV: process.env.NODE_ENV ?? \"\",\n    CI: process.env.CI ?? \"\",\n  },\n};\n\nawait fs.mkdir(reportsDir, { recursive: true });\nconst jsonPath = path.join(reportsDir, \"baseline.json\");\nconst txtPath = path.join(reportsDir, \"baseline.txt\");\n\nawait fs.writeFile(jsonPath, JSON.stringify(baseline, null, 2));\n\nconst txtLines = [\n  `Generated: ${baseline.generatedAt}`,\n  `Branch: ${baseline.branch}`,\n  `Commit: ${baseline.commit}`,\n  \"\",\n  \"Git Status:\",\n  baseline.status,\n  \"\",\n  `Node: ${baseline.nodeVersion}`,\n  `npm: ${baseline.npmVersion}`,\n  `Platform: ${baseline.platform.release}`,\n];\n\nawait fs.writeFile(txtPath, txtLines.join(\"\\n\"));\n\nconsole.log(`Baseline written to ${path.relative(rootDir, jsonPath)}`);\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/depcheck.config.cjs","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'global-require').","line":3,"column":5,"severity":1,"nodeType":null,"fix":{"range":[45,87],"text":" "}},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":5,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"function safeRequire(moduleId) {\n  try {\n    // eslint-disable-next-line global-require\n    return require(moduleId).default;\n  } catch (error) {\n    return () => ({});\n  }\n}\n\nmodule.exports = {\n  ignoreMatches: [\n    \"@playwright/test\",\n    \"@size-limit/*\",\n    \"tailwindcss\",\n    \"vite\",\n    \"ts-node\",\n    \"typescript\",\n    \"eslint\",\n    \"eslint-plugin-*\",\n    \"@typescript-eslint/*\",\n    \"@modelcontextprotocol/*\",\n  ],\n  ignoreDirs: [\"dist\", \"reports\", \"docs\", \"tests/fixtures\"],\n  specials: [\n    safeRequire(\"depcheck/dist/special/eslint\"),\n    safeRequire(\"depcheck/dist/special/babel\"),\n    safeRequire(\"depcheck/dist/special/bin\"),\n    safeRequire(\"depcheck/dist/special/webpack\"),\n  ],\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/export-graph.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/find-dead-exports.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":28,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport { findUnusedExports } from \"./export-graph.mjs\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst rootDir = path.resolve(__dirname, \"..\", \"..\");\nconst reportsDir = path.join(rootDir, \"reports\", \"cleanup\");\nconst allowlistPath = path.join(__dirname, \"allowlist.json\");\n\nasync function loadAllowlist() {\n  try {\n    const content = await fs.readFile(allowlistPath, \"utf8\");\n    return JSON.parse(content);\n  } catch {\n    return { modules: [], exports: [], assets: [] };\n  }\n}\n\nconst allowlist = await loadAllowlist();\n\nconst results = await findUnusedExports(allowlist);\n\nawait fs.mkdir(reportsDir, { recursive: true });\nconst outputPath = path.join(reportsDir, \"dead-exports.json\");\nawait fs.writeFile(outputPath, JSON.stringify({ unused: results }, null, 2));\nconsole.log(`Dead export report written to ${path.relative(rootDir, outputPath)}`);\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/find-unused-assets.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":161,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":161,"endColumn":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createHash } from \"node:crypto\";\nimport { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst rootDir = path.resolve(__dirname, \"..\", \"..\");\nconst reportsDir = path.join(rootDir, \"reports\", \"cleanup\");\nconst allowlistPath = path.join(__dirname, \"allowlist.json\");\n\nasync function loadAllowlist() {\n  try {\n    const content = await fs.readFile(allowlistPath, \"utf8\");\n    return JSON.parse(content);\n  } catch {\n    return { modules: [], exports: [], assets: [] };\n  }\n}\n\nconst allowlist = await loadAllowlist();\n\nconst assetRoots = [\"public\", \"assets\", \"styles\", \"static\"].map((dir) =>\n  path.join(rootDir, dir),\n);\n\nasync function walk(directory) {\n  const entries = await fs.readdir(directory, { withFileTypes: true });\n  const files = [];\n  for (const entry of entries) {\n    const entryPath = path.join(directory, entry.name);\n    if (entry.isDirectory()) {\n      files.push(...(await walk(entryPath)));\n    } else if (entry.isFile()) {\n      files.push(entryPath);\n    }\n  }\n  return files;\n}\n\nasync function collectAssets() {\n  const assets = [];\n  for (const root of assetRoots) {\n    try {\n      const stats = await fs.stat(root);\n      if (!stats.isDirectory()) {\n        continue;\n      }\n    } catch {\n      continue;\n    }\n\n    const files = await walk(root);\n    for (const filePath of files) {\n      const relPath = path.relative(rootDir, filePath).replace(/\\\\/g, \"/\");\n      if (allowlist.assets?.includes(relPath)) {\n        continue;\n      }\n\n      const ext = path.extname(filePath).toLowerCase();\n      const excluded = [\n        \".map\",\n        \".txt\",\n        \".md\",\n        \".html\",\n        \".json\",\n        \".js\",\n      ];\n      if (ext === \".json\" && relPath.startsWith(\"public/\")) {\n        // allowlist handled separately\n      } else if (excluded.includes(ext)) {\n        continue;\n      }\n\n      const buffer = await fs.readFile(filePath);\n      const hash = createHash(\"sha1\").update(buffer).digest(\"hex\");\n      assets.push({\n        path: relPath,\n        size: buffer.length,\n        hash,\n        extension: ext,\n      });\n    }\n  }\n  return assets;\n}\n\nconst assetRecords = await collectAssets();\n\nconst searchRoots = [\n  \"src\",\n  \"scripts\",\n  \"services\",\n  \"pages\",\n  \"styles\",\n  \"tests\",\n  \"index.html\",\n  \"README.md\",\n];\n\nasync function readIfExists(relPath) {\n  const targetPath = path.join(rootDir, relPath);\n  try {\n    const stats = await fs.stat(targetPath);\n    if (stats.isDirectory()) {\n      const files = await walk(targetPath);\n      const contents = await Promise.all(\n        files.map(async (file) => ({\n          path: path.relative(rootDir, file).replace(/\\\\/g, \"/\"),\n          content: await fs.readFile(file, \"utf8\"),\n        })),\n      );\n      return contents;\n    }\n    return [\n      {\n        path: relPath,\n        content: await fs.readFile(targetPath, \"utf8\"),\n      },\n    ];\n  } catch {\n    return [];\n  }\n}\n\nconst searchFiles = (\n  await Promise.all(searchRoots.map((rel) => readIfExists(rel)))\n).flat();\n\nconst usageMap = new Map(assetRecords.map((asset) => [asset.path, { used: false }]));\n\nfor (const file of searchFiles) {\n  const content = file.content;\n  for (const asset of assetRecords) {\n    if (usageMap.get(asset.path)?.used) {\n      continue;\n    }\n    const fileName = path.basename(asset.path);\n    if (\n      content.includes(asset.path) ||\n      content.includes(asset.path.replace(/^public\\//, \"\")) ||\n      content.includes(fileName)\n    ) {\n      usageMap.get(asset.path).used = true;\n    }\n  }\n}\n\nconst unusedAssets = assetRecords.filter((asset) => !usageMap.get(asset.path).used);\n\nawait fs.mkdir(reportsDir, { recursive: true });\nconst outputPath = path.join(reportsDir, \"assets.json\");\nawait fs.writeFile(\n  outputPath,\n  JSON.stringify({\n    scanned: assetRecords.length,\n    unused: unusedAssets,\n  }, null, 2),\n);\n\nconsole.log(\n  `Asset analysis complete. ${unusedAssets.length} unused assets recorded at ${path.relative(\n    rootDir,\n    outputPath,\n  )}`,\n);\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/remove-dead.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":11,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":158,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":158,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":162,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":162,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":176,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":176,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":177,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":177,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":193,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":195,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":195,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":199,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":199,"endColumn":8}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst rootDir = path.resolve(__dirname, \"..\", \"..\");\nconst reportsDir = path.join(rootDir, \"reports\", \"cleanup\");\nconst allowlistPath = path.join(__dirname, \"allowlist.json\");\n\nconst isDryRun = process.argv.includes(\"--dry\");\n\nasync function loadAllowlist() {\n  try {\n    const content = await fs.readFile(allowlistPath, \"utf8\");\n    return JSON.parse(content);\n  } catch {\n    return { modules: [], exports: [], assets: [] };\n  }\n}\n\nconst allowlist = await loadAllowlist();\n\nasync function readJson(relPath) {\n  try {\n    const filePath = path.join(reportsDir, relPath);\n    const content = await fs.readFile(filePath, \"utf8\");\n    return JSON.parse(content);\n  } catch {\n    return null;\n  }\n}\n\nasync function readText(relPath) {\n  try {\n    const filePath = path.join(reportsDir, relPath);\n    const content = await fs.readFile(filePath, \"utf8\");\n    return content;\n  } catch {\n    return \"\";\n  }\n}\n\nfunction recordVote(votes, filePath, tool, detail) {\n  const normalized = filePath.replace(/\\\\/g, \"/\");\n  const entry = votes.get(normalized) ?? {\n    file: normalized,\n    tools: new Set(),\n    details: [],\n  };\n  entry.tools.add(tool);\n  if (detail) {\n    entry.details.push({ tool, detail });\n  }\n  votes.set(normalized, entry);\n}\n\nconst votes = new Map();\n\nconst tsPruneRaw = await readText(\"tsprune.txt\");\nif (tsPruneRaw) {\n  for (const line of tsPruneRaw.split(/\\r?\\n/)) {\n    if (!line.trim()) continue;\n    const [filePart, ...rest] = line.split(\":\");\n    if (!filePart) continue;\n    const relPath = filePart.trim();\n    recordVote(votes, relPath, \"ts-prune\", rest.join(\":\").trim());\n  }\n}\n\nconst eslintReport = await readJson(\"eslint.json\");\nif (Array.isArray(eslintReport)) {\n  for (const fileResult of eslintReport) {\n    const relPath = path.relative(rootDir, fileResult.filePath || \"\");\n    if (!relPath || relPath.startsWith(\"..\")) continue;\n    const relevantMessages = (fileResult.messages || []).filter((message) =>\n      [\n        \"no-unused-vars\",\n        \"@typescript-eslint/no-unused-vars\",\n        \"sonarjs/no-dead-store\",\n        \"no-dead-code\",\n      ].includes(message.ruleId),\n    );\n    if (!relevantMessages.length) continue;\n    const detail = relevantMessages\n      .map((msg) => `${msg.ruleId}@${msg.line}:${msg.column}`)\n      .join(\", \");\n    recordVote(votes, relPath, \"eslint\", detail);\n  }\n}\n\nconst deadExports = await readJson(\"dead-exports.json\");\nif (deadExports?.unused) {\n  for (const item of deadExports.unused) {\n    if (!item?.file) continue;\n    recordVote(votes, item.file, \"ts-morph\", item.export);\n  }\n}\n\nconst assets = await readJson(\"assets.json\");\nif (assets?.unused) {\n  for (const asset of assets.unused) {\n    if (!asset?.path) continue;\n    recordVote(votes, asset.path, \"asset-scan\", asset.hash);\n  }\n}\n\nfunction isConfigFile(filePath) {\n  const configNames = [\n    \"tsconfig.json\",\n    \"vite.config.js\",\n    \"webpack.config.js\",\n    \"jest.config.js\",\n    \"eslint.config.js\",\n    \"eslint.config.cjs\",\n    \"tailwind.config.js\",\n    \"postcss.config.js\",\n    \"playwright.config.ts\",\n    \"cypress.config.ts\",\n    \"cypress.config.js\",\n    \"lighthouserc.json\",\n    \"package.json\",\n    \"package-lock.json\",\n  ];\n  return configNames.some((name) => filePath.endsWith(name));\n}\n\nconst candidates = [];\n\nfor (const vote of votes.values()) {\n  const toolCount = vote.tools.size;\n  if (toolCount < 2) continue;\n  if (allowlist.modules?.includes(vote.file)) continue;\n  if (allowlist.assets?.includes(vote.file)) continue;\n  if (isConfigFile(vote.file)) continue;\n  candidates.push({\n    ...vote,\n    toolCount,\n    tools: Array.from(vote.tools),\n  });\n}\n\nawait fs.mkdir(reportsDir, { recursive: true });\nconst candidatesPath = path.join(reportsDir, \"candidates.json\");\nawait fs.writeFile(\n  candidatesPath,\n  JSON.stringify(\n    {\n      generatedAt: new Date().toISOString(),\n      candidates,\n    },\n    null,\n    2,\n  ),\n);\n\nif (!candidates.length) {\n  console.log(\"No consensus candidates found for removal.\");\n  if (isDryRun) {\n    await fs.writeFile(path.join(reportsDir, \"remove-dry.txt\"), \"No candidates.\\n\");\n  }\n  process.exit(0);\n}\n\nif (isDryRun) {\n  const dryPath = path.join(reportsDir, \"remove-dry.txt\");\n  const lines = candidates.map(\n    (candidate) =>\n      `PENDING: ${candidate.file} (tools: ${candidate.tools.join(\", \")}) ${\n        candidate.details.length ? `details: ${candidate.details\n          .map((d) => `${d.tool}:${d.detail}`)\n          .join(\"; \")}` : \"\"\n      }`,\n  );\n  await fs.writeFile(dryPath, lines.join(\"\\n\") + \"\\n\");\n  console.log(`Dry-run summary written to ${path.relative(rootDir, dryPath)}`);\n  process.exit(0);\n}\n\n// Real removal path (safe trash move)\nconst trashRoot = path.join(rootDir, \".trash\");\nconst timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\nconst trashDir = path.join(trashRoot, timestamp);\nawait fs.mkdir(trashDir, { recursive: true });\n\nfor (const candidate of candidates) {\n  const sourcePath = path.join(rootDir, candidate.file);\n  try {\n    await fs.stat(sourcePath);\n    const destination = path.join(trashDir, candidate.file);\n    await fs.mkdir(path.dirname(destination), { recursive: true });\n    await fs.rename(sourcePath, destination);\n    console.log(`Moved ${candidate.file} -> ${path.relative(rootDir, destination)}`);\n  } catch (error) {\n    console.warn(`Failed to move ${candidate.file}: ${error.message}`);\n  }\n}\n\nconsole.log(`Files moved to ${path.relative(rootDir, trashDir)}`);\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/run-depcheck.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":34,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":113,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":113,"endColumn":8}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport { createRequire } from \"node:module\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst rootDir = path.resolve(__dirname, \"..\", \"..\");\nconst reportsDir = path.join(rootDir, \"reports\", \"cleanup\");\nconst require = createRequire(import.meta.url);\n\nconst config = require(\"./depcheck.config.cjs\");\n\nfunction wildcardToRegex(pattern) {\n  return new RegExp(`^${pattern.replace(/[-/\\\\^$+?.()|[\\]{}]/g, \"\\\\$&\").replace(/\\*/g, \".*\")}$`);\n}\n\nconst ignorePatterns = (config.ignoreMatches || []).map(wildcardToRegex);\n\nfunction isIgnored(dep) {\n  return ignorePatterns.some((regex) => regex.test(dep));\n}\n\nasync function runWithModule() {\n  try {\n    const module = await import(\"depcheck\");\n    const depcheck = module.default ?? module;\n    const result = await depcheck(rootDir, {\n      ...config,\n      ignoreMatches: config.ignoreMatches,\n    });\n    return result;\n  } catch (error) {\n    console.warn(`depcheck module unavailable, using fallback: ${error.message}`);\n    return null;\n  }\n}\n\nasync function walk(directory) {\n  const entries = await fs.readdir(directory, { withFileTypes: true });\n  const files = [];\n  for (const entry of entries) {\n    const entryPath = path.join(directory, entry.name);\n    if (entry.isDirectory()) {\n      if ([\"node_modules\", \"dist\", \"reports\"].includes(entry.name)) continue;\n      files.push(...(await walk(entryPath)));\n    } else if (entry.isFile()) {\n      if (/\\.(png|jpg|jpeg|gif|svg|ico|webp|avif|woff2?|ttf|otf|eot)$/i.test(entry.name)) {\n        continue;\n      }\n      files.push(entryPath);\n    }\n  }\n  return files;\n}\n\nasync function fallbackCheck() {\n  const packageJson = JSON.parse(await fs.readFile(path.join(rootDir, \"package.json\"), \"utf8\"));\n  const dependencies = Object.keys(packageJson.dependencies || {});\n  const devDependencies = Object.keys(packageJson.devDependencies || {});\n\n  const searchRoots = [\"src\", \"scripts\", \"services\", \"pages\", \"tests\", \"styles\"];\n  const files = [];\n  for (const root of searchRoots) {\n    const abs = path.join(rootDir, root);\n    try {\n      const stats = await fs.stat(abs);\n      if (stats.isDirectory()) {\n        files.push(...(await walk(abs)));\n      } else if (stats.isFile()) {\n        files.push(abs);\n      }\n    } catch {\n      // ignore missing directories\n    }\n  }\n\n  const contents = await Promise.all(\n    files.map(async (file) => ({\n      file,\n      content: await fs.readFile(file, \"utf8\"),\n    })),\n  );\n\n  function findUnused(list) {\n    const unused = [];\n    for (const dep of list) {\n      if (isIgnored(dep)) continue;\n      const isUsed = contents.some(({ content }) => content.includes(dep));\n      if (!isUsed) {\n        unused.push(dep);\n      }\n    }\n    return unused;\n  }\n\n  return {\n    dependencies: findUnused(dependencies),\n    devDependencies: findUnused(devDependencies),\n    missing: {},\n    using: {},\n  };\n}\n\nlet result = await runWithModule();\nif (!result) {\n  result = await fallbackCheck();\n}\n\nawait fs.mkdir(reportsDir, { recursive: true });\nconst outputPath = path.join(reportsDir, \"depcheck.json\");\nawait fs.writeFile(outputPath, JSON.stringify(result, null, 2));\nconsole.log(`Depcheck report written to ${path.relative(rootDir, outputPath)}`);\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/run-esbuild.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":40,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":43,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":56,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":10}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst rootDir = path.resolve(__dirname, \"..\", \"..\");\nconst reportsDir = path.join(rootDir, \"reports\", \"cleanup\");\nconst entryPoint = path.join(rootDir, \"src\", \"index.ts\");\nconst metaPath = path.join(reportsDir, \"meta.json\");\n\nawait fs.mkdir(reportsDir, { recursive: true });\n\nasync function runEsbuild() {\n  try {\n    const esbuildModule = await import(\"esbuild\");\n    const esbuild = esbuildModule.build ? esbuildModule : esbuildModule.default;\n    const result = await esbuild.build({\n      entryPoints: [entryPoint],\n      bundle: true,\n      metafile: true,\n      format: \"esm\",\n      platform: \"browser\",\n      sourcemap: false,\n      logLevel: \"silent\",\n      outfile: path.join(reportsDir, \"bundle.js\"),\n      define: {\n        \"process.env.NODE_ENV\": '\"production\"',\n      },\n    });\n    if (result.metafile) {\n      await fs.writeFile(metaPath, JSON.stringify(result.metafile, null, 2));\n    }\n    // Remove bundle artifact if generated\n    try {\n      await fs.unlink(path.join(reportsDir, \"bundle.js\"));\n    } catch {\n      // ignore\n    }\n    console.log(`esbuild metafile written to ${path.relative(rootDir, metaPath)}`);\n    return true;\n  } catch (error) {\n    console.warn(`esbuild unavailable, writing placeholder metafile: ${error.message}`);\n    return false;\n  }\n}\n\nconst success = await runEsbuild();\nif (!success) {\n  const placeholder = {\n    error: \"esbuild unavailable\",\n    generatedAt: new Date().toISOString(),\n    entryPoint: path.relative(rootDir, entryPoint),\n  };\n  await fs.writeFile(metaPath, JSON.stringify(placeholder, null, 2));\n  console.log(`Placeholder metafile written to ${path.relative(rootDir, metaPath)}`);\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/run-tsprune.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":25,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":68,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":75,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":75,"endColumn":8}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { spawn } from \"node:child_process\";\nimport { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport { findUnusedExports } from \"./export-graph.mjs\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst rootDir = path.resolve(__dirname, \"..\", \"..\");\nconst reportsDir = path.join(rootDir, \"reports\", \"cleanup\");\nconst allowlistPath = path.join(__dirname, \"allowlist.json\");\n\nasync function loadAllowlist() {\n  try {\n    const data = await fs.readFile(allowlistPath, \"utf8\");\n    return JSON.parse(data);\n  } catch {\n    return { modules: [], exports: [] };\n  }\n}\n\nfunction runCli() {\n  return new Promise((resolve, reject) => {\n    const child = spawn(\n      process.platform === \"win32\" ? \"npx.cmd\" : \"npx\",\n      [\n        \"--yes\",\n        \"ts-prune\",\n        \"--ignore\",\n        \"index.ts\",\n        \"--ignore\",\n        \"**/*.d.ts\",\n      ],\n      { cwd: rootDir, stdio: [\"ignore\", \"pipe\", \"pipe\"] },\n    );\n    let stdout = \"\";\n    let stderr = \"\";\n    child.stdout.on(\"data\", (data) => {\n      stdout += data.toString();\n    });\n    child.stderr.on(\"data\", (data) => {\n      stderr += data.toString();\n    });\n    child.on(\"close\", (code) => {\n      if (code === 0) {\n        resolve(stdout);\n      } else {\n        reject(new Error(stderr || `ts-prune exited with code ${code}`));\n      }\n    });\n    child.on(\"error\", reject);\n  });\n}\n\nasync function fallback() {\n  const allowlist = await loadAllowlist();\n  const unused = await findUnusedExports(allowlist);\n  const filtered = unused.filter((item) => {\n    return !item.file.endsWith(\"index.ts\") && !item.file.endsWith(\".d.ts\");\n  });\n  return filtered.map((item) => `${item.file}: ${item.export}`).join(\"\\n\");\n}\n\nlet output = \"\";\ntry {\n  output = await runCli();\n} catch (error) {\n  console.warn(`ts-prune unavailable, using fallback: ${error.message}`);\n  output = await fallback();\n}\n\nawait fs.mkdir(reportsDir, { recursive: true });\nconst outputPath = path.join(reportsDir, \"tsprune.txt\");\nawait fs.writeFile(outputPath, output);\nconsole.log(`ts-prune results written to ${path.relative(rootDir, outputPath)}`);\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/sonarjs-stub.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/cleanup/summarize.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":243,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":243,"endColumn":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst rootDir = path.resolve(__dirname, \"..\", \"..\");\nconst reportsDir = path.join(rootDir, \"reports\", \"cleanup\");\n\nasync function readJson(relPath) {\n  try {\n    const content = await fs.readFile(path.join(reportsDir, relPath), \"utf8\");\n    return JSON.parse(content);\n  } catch {\n    return null;\n  }\n}\n\nasync function readText(relPath) {\n  try {\n    return await fs.readFile(path.join(reportsDir, relPath), \"utf8\");\n  } catch {\n    return \"\";\n  }\n}\n\nawait fs.mkdir(reportsDir, { recursive: true });\n\nconst baseline = await readJson(\"baseline.json\");\nconst deadExports = await readJson(\"dead-exports.json\");\nconst assets = await readJson(\"assets.json\");\nconst candidates = await readJson(\"candidates.json\");\nconst depcheck = await readJson(\"depcheck.json\");\nconst tsprune = await readText(\"tsprune.txt\");\nconst dryRun = await readText(\"remove-dry.txt\");\n\nconst summaryLines = [];\nsummaryLines.push(\"# Cleanup Summary\\n\");\nsummaryLines.push(`Generated: ${new Date().toISOString()}`);\nif (baseline) {\n  summaryLines.push(\n    `Branch: ${baseline.branch ?? \"unknown\"} (commit ${baseline.commit?.slice(0, 7) ?? \"n/a\"})`,\n  );\n}\nsummaryLines.push(\"\");\n\nif (candidates?.candidates?.length) {\n  summaryLines.push(\"## Files flagged by multiple tools\\n\");\n  for (const candidate of candidates.candidates) {\n    summaryLines.push(\n      `- ${candidate.file} — tools: ${candidate.tools.join(\", \")}${\n        candidate.details?.length\n          ? ` (details: ${candidate.details\n              .map((detail) => `${detail.tool}:${detail.detail}`)\n              .join(\"; \")})`\n          : \"\"\n      }`,\n    );\n  }\n  summaryLines.push(\"\");\n} else {\n  summaryLines.push(\"## Files flagged by multiple tools\\n\");\n  summaryLines.push(\"- None yet. Run additional scans to gather evidence.\\n\");\n}\n\nif (deadExports?.unused?.length) {\n  summaryLines.push(\"## Dead exports\\n\");\n  for (const entry of deadExports.unused) {\n    summaryLines.push(`- ${entry.file} :: ${entry.export}`);\n  }\n  summaryLines.push(\"\");\n}\n\nif (assets?.unused?.length) {\n  summaryLines.push(\"## Unused assets\\n\");\n  for (const asset of assets.unused) {\n    summaryLines.push(`- ${asset.path} (${asset.size} bytes)`);\n  }\n  summaryLines.push(\"\");\n}\n\nif (tsprune) {\n  const lines = tsprune\n    .split(/\\r?\\n/)\n    .filter(Boolean)\n    .slice(0, 20);\n  if (lines.length) {\n    summaryLines.push(\"## ts-prune (sample)\\n\");\n    for (const line of lines) {\n      summaryLines.push(`- ${line}`);\n    }\n    if (tsprune.split(/\\r?\\n/).filter(Boolean).length > lines.length) {\n      summaryLines.push(\"- ...\");\n    }\n    summaryLines.push(\"\");\n  }\n}\n\nif (dryRun) {\n  summaryLines.push(\"## Removal dry-run\\n\");\n  summaryLines.push(\"```\");\n  summaryLines.push(dryRun.trim() || \"No candidates.\");\n  summaryLines.push(\"```\");\n  summaryLines.push(\"\");\n}\n\nconst depCommands = [];\nif (depcheck?.dependencies?.length) {\n  for (const dep of depcheck.dependencies) {\n    depCommands.push(`npm uninstall ${dep}`);\n  }\n}\nif (depcheck?.devDependencies?.length) {\n  for (const dep of depcheck.devDependencies) {\n    depCommands.push(`npm uninstall --save-dev ${dep}`);\n  }\n}\n\nif (depCommands.length) {\n  summaryLines.push(\"## Suggested dependency pruning commands\\n\");\n  for (const command of depCommands) {\n    summaryLines.push(`- ${command}`);\n  }\n  summaryLines.push(\"\");\n}\n\nlet estimatedBytes = 0;\nif (assets?.unused) {\n  estimatedBytes += assets.unused.reduce((sum, item) => sum + (item.size ?? 0), 0);\n}\nif (candidates?.candidates) {\n  for (const candidate of candidates.candidates) {\n    try {\n      const stats = await fs.stat(path.join(rootDir, candidate.file));\n      estimatedBytes += stats.size;\n    } catch {\n      // ignore missing files\n    }\n  }\n}\n\nsummaryLines.push(\"## Estimated size impact\\n\");\nsummaryLines.push(`Potential savings: ${(estimatedBytes / 1024).toFixed(2)} KiB\\n`);\n\nconst summaryPath = path.join(reportsDir, \"summary.md\");\nawait fs.writeFile(summaryPath, summaryLines.join(\"\\n\"));\n\n// Dep prune script\nconst depScriptPath = path.join(reportsDir, \"dep-prune.sh\");\nconst depScript = [\n  \"#!/usr/bin/env bash\",\n  \"set -euo pipefail\",\n  \"# Suggested commands based on depcheck analysis\",\n  ...depCommands,\n];\nawait fs.writeFile(depScriptPath, depScript.join(\"\\n\") + \"\\n\");\n\n// Move plan generation\nasync function buildMovePlan() {\n  const srcDir = path.join(rootDir, \"src\");\n  const targetNamespaces = new Set([\"ai\", \"parsers\", \"server\", \"ui\", \"utils\"]);\n\n  async function walk(directory) {\n    const entries = await fs.readdir(directory, { withFileTypes: true });\n    const files = [];\n    for (const entry of entries) {\n      const entryPath = path.join(directory, entry.name);\n      if (entry.isDirectory()) {\n        files.push(...(await walk(entryPath)));\n      } else if (entry.isFile() && /\\.(ts|tsx|js|jsx)$/.test(entry.name)) {\n        files.push(entryPath);\n      }\n    }\n    return files;\n  }\n\n  let srcExists = false;\n  try {\n    const stats = await fs.stat(srcDir);\n    srcExists = stats.isDirectory();\n  } catch {\n    srcExists = false;\n  }\n\n  if (!srcExists) {\n    return [];\n  }\n\n  const sourceFiles = await walk(srcDir);\n\n  const rootLevel = sourceFiles.filter((file) => {\n    const rel = path.relative(srcDir, file).replace(/\\\\/g, \"/\");\n    return !rel.includes(\"/\");\n  });\n\n  const plans = [];\n\n  for (const filePath of rootLevel) {\n    const rel = path.relative(srcDir, filePath).replace(/\\\\/g, \"/\");\n    const content = await fs.readFile(filePath, \"utf8\");\n    const importMatches = content.matchAll(/from\\s+['\"]([^'\"]+)['\"]/g);\n    const counts = new Map();\n    for (const match of importMatches) {\n      const specifier = match[1];\n      if (!specifier.startsWith(\".\")) continue;\n      const resolved = path\n        .relative(\n          srcDir,\n          path.resolve(path.dirname(filePath), specifier),\n        )\n        .replace(/\\\\/g, \"/\");\n      const [namespace] = resolved.split(\"/\");\n      if (targetNamespaces.has(namespace)) {\n        counts.set(namespace, (counts.get(namespace) ?? 0) + 1);\n      }\n    }\n    if (!counts.size) continue;\n    const best = Array.from(counts.entries()).sort((a, b) => b[1] - a[1])[0];\n    if (!best) continue;\n    const [namespace, score] = best;\n    if (namespace && namespace !== rel.split(\"/\")[0]) {\n      plans.push({ file: `src/${rel}`, target: `src/${namespace}/`, score });\n    }\n  }\n\n  return plans;\n}\n\nconst movePlan = await buildMovePlan();\nconst movePlanLines = [\"# Proposed source moves\", \"\"];\nif (movePlan.length) {\n  for (const item of movePlan) {\n    movePlanLines.push(`- ${item.file} -> ${item.target} (score: ${item.score})`);\n  }\n} else {\n  movePlanLines.push(\"- No immediate moves suggested from import graph analysis.\");\n}\nmovePlanLines.push(\"\");\n\nconst movePlanPath = path.join(reportsDir, \"move-plan.md\");\nawait fs.writeFile(movePlanPath, movePlanLines.join(\"\\n\"));\n\nconsole.log(`Summary written to ${path.relative(rootDir, summaryPath)}`);\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/create-search-index.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":15,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":16,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":20,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":21,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":22,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":23,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":29,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":30,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":35,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":49,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":49,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":50,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":50,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":54,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":55,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":56,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":58,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":58,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":59,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":10}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n/* eslint-env node */\n\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport dotenv from 'dotenv';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Load .env file\ndotenv.config({ path: path.resolve(__dirname, '../.env') });\n\nconst svc = process.env.AZURE_SEARCH_NAME;\nconst key = process.env.AZURE_SEARCH_ADMIN_KEY;\nconst indexName = 'cardiology-index';\n\nif (!svc || !key) {\n  console.error('Error: AZURE_SEARCH_NAME and AZURE_SEARCH_ADMIN_KEY must be set');\n  console.error('Example:');\n  console.error('  AZURE_SEARCH_NAME=cardiologysuite-search AZURE_SEARCH_ADMIN_KEY=xxx npm run search:index:put');\n  process.exit(1);\n}\n\nconst endpoint = `https://${svc}.search.windows.net`;\nconst indexDefPath = path.resolve(__dirname, '../infra/search/cardiology-index.json');\n\nconsole.log(`Creating index '${indexName}' on ${endpoint}...`);\nconsole.log(`Reading definition from: ${indexDefPath}`);\n\ntry {\n  const indexDef = JSON.parse(await fs.readFile(indexDefPath, 'utf-8'));\n  \n  const res = await fetch(\n    `${endpoint}/indexes/${indexName}?api-version=2024-07-01`,\n    {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'api-key': key\n      },\n      body: JSON.stringify(indexDef)\n    }\n  );\n\n  if (!res.ok) {\n    const errorText = await res.text();\n    console.error('Index creation failed:', res.status, errorText);\n    process.exit(1);\n  }\n\n  const result = await res.json();\n  console.log('✅ Successfully created index:', indexName);\n  console.log('Fields:', result.fields?.length || 0);\n  console.log('Vector search configured:', !!result.vectorSearch);\n} catch (error) {\n  console.error('Error creating index:', error.message);\n  process.exit(1);\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/debug-fulltext.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/debug-sections.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/debug-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/debug-vitals-minmax.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/debug-vitals.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/generateNote.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/parse-samples.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/parse.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/push_search_docs.mjs","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fs' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"fs"},"fix":{"range":[50,58],"text":""},"desc":"Remove unused variable 'fs'."}]},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":15,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":16,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":17,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":20,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":21,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":87,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":87,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":90,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":104,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":104,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":105,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":105,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":109,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":109,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":110,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":112,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":113,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":113,"endColumn":10}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n/* eslint-env node */\n\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport dotenv from 'dotenv';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Load .env file\ndotenv.config({ path: path.resolve(__dirname, '../.env') });\n\nconst svc = process.env.AZURE_SEARCH_NAME;\nconst key = process.env.AZURE_SEARCH_ADMIN_KEY;\nconst index = process.env.AZURE_SEARCH_INDEX || 'cardiology-index';\n\nif (!svc || !key) {\n  console.error('Error: AZURE_SEARCH_NAME and AZURE_SEARCH_ADMIN_KEY must be set');\n  process.exit(1);\n}\n\nconst endpoint = `https://${svc}.search.windows.net`;\n\n// Sample cardiology documents\nconst docs = [\n  {\n    id: \"sample-1\",\n    title: \"ACC/AHA NSTEMI Guidelines\",\n    sourceId: \"blob://guidelines/acc_nstemi.pdf#0\",\n    url: \"https://www.ahajournals.org/nstemi-guidelines\",\n    chunkIndex: 0,\n    createdAt: new Date().toISOString(),\n    content: \"Initial ACS evaluation includes ECG within 10 minutes, troponin measurement, and risk stratification using TIMI or GRACE scores. Early invasive strategy is recommended for high-risk patients.\",\n    embedding: [] // Empty for now; would populate with actual embeddings\n  },\n  {\n    id: \"sample-2\",\n    title: \"Heart Failure Management - ESC Guidelines\",\n    sourceId: \"blob://guidelines/esc_hf.pdf#0\",\n    url: \"https://www.escardio.org/guidelines/heart-failure\",\n    chunkIndex: 0,\n    createdAt: new Date().toISOString(),\n    content: \"HFrEF management includes ACE inhibitors or ARBs, beta-blockers, MRAs, and SGLT2 inhibitors. Target NT-proBNP <1000 pg/mL for optimal outcomes.\",\n    embedding: []\n  },\n  {\n    id: \"sample-3\",\n    title: \"Atrial Fibrillation - Anticoagulation\",\n    sourceId: \"blob://guidelines/afib_anticoag.pdf#0\",\n    url: \"https://www.ahajournals.org/afib-guidelines\",\n    chunkIndex: 0,\n    createdAt: new Date().toISOString(),\n    content: \"CHA2DS2-VASc score guides anticoagulation decisions. Score ≥2 in males or ≥3 in females warrants oral anticoagulation. DOACs preferred over warfarin in most patients.\",\n    embedding: []\n  },\n  {\n    id: \"sample-4\",\n    title: \"Aortic Stenosis - Intervention Criteria\",\n    sourceId: \"blob://guidelines/as_intervention.pdf#0\",\n    url: \"https://www.acc.org/aortic-stenosis\",\n    chunkIndex: 0,\n    createdAt: new Date().toISOString(),\n    content: \"Severe AS defined as AVA <1.0 cm², mean gradient >40 mmHg, or peak velocity >4.0 m/s. TAVR or SAVR indicated for symptomatic severe AS or asymptomatic with LVEF <50%.\",\n    embedding: []\n  },\n  {\n    id: \"sample-5\",\n    title: \"Acute Decompensated Heart Failure\",\n    sourceId: \"blob://guidelines/adhf.pdf#0\",\n    url: \"https://www.escardio.org/acute-hf\",\n    chunkIndex: 0,\n    createdAt: new Date().toISOString(),\n    content: \"ADHF management includes IV diuretics, vasodilators if SBP >110 mmHg, and inotropes for cardiogenic shock. Monitor daily weights, I/O, and renal function closely.\",\n    embedding: []\n  }\n];\n\nconst payload = {\n  value: docs.map(d => ({\n    '@search.action': 'mergeOrUpload',\n    ...d\n  }))\n};\n\nconsole.log(`Indexing ${docs.length} documents to ${endpoint}/indexes/${index}...`);\n\ntry {\n  const res = await fetch(\n    `${endpoint}/indexes/${index}/docs/index?api-version=2024-07-01`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'api-key': key\n      },\n      body: JSON.stringify(payload)\n    }\n  );\n\n  if (!res.ok) {\n    const errorText = await res.text();\n    console.error('Indexing failed:', res.status, errorText);\n    process.exit(1);\n  }\n\n  const result = await res.json();\n  console.log('✅ Successfully indexed', docs.length, 'documents');\n  console.log('Result:', JSON.stringify(result, null, 2));\n} catch (error) {\n  console.error('Error indexing documents:', error.message);\n  process.exit(1);\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/security-file-integrity.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/security-phi-scanner.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/test-diff.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/test-parse-mock.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-unused-vars').","line":10,"column":45,"severity":1,"nodeType":null,"fix":{"range":[396,433],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"#!/usr/bin/env node\n// @ts-nocheck\n// Quick test harness: inject test overrides and call parseAzureNote directly\n// Note: __filename and __dirname are available for future use if needed\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Ensure ES module resolution works from repo root\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename); // eslint-disable-line no-unused-vars\n\n// Small mock: override blobServiceClient and openai used by azureFileContext\nglobalThis.__TEST_OVERRIDES__ = {\n  blobServiceClient: {\n    getContainerClient: (_name) => ({\n      getBlobClient: (_blobName) => ({\n        // force download() to throw so code uses block.downloadToBuffer fallback\n        download: async () => { throw new Error('mock download not implemented'); },\n      }),\n      getBlockBlobClient: (_blobName) => ({\n        downloadToBuffer: async () => Buffer.from('Chief complaint: chest pain\\nTroponin: elevated\\nECG: ST depressions consistent with ischemia.\\nImpression: NSTEMI.\\nPlan: start aspirin, heparin, call cardiology for urgent cath.'),\n      }),\n    }),\n  },\n  openai: {\n    chat: {\n      completions: {\n        create: async (_opts) => {\n          // Return a deterministic summary similar to what the real model would\n          return {\n            choices: [\n              {\n                message: {\n                  content: `Assessment: NSTEMI\\n\\nPlan:\\n- Aspirin 325 mg loading dose\\n- Heparin infusion\\n- Cardiology consult for urgent coronary angiography\\n- Monitor troponins and vitals`,\n                },\n              },\n            ],\n          };\n        },\n      },\n    },\n  },\n};\n\n// Load and run parser\nimport { parseAzureNote } from '../src/parsers/cardiology/index.js';\n\nasync function main() {\n  try {\n    const result = await parseAzureNote('cardiology-data', 'NSTEMI_case.txt');\n    console.log(JSON.stringify(result, null, 2));\n  } catch (err) {\n    console.error('Error running parseAzureNote:', err?.message || err);\n    process.exit(1);\n  }\n}\n\nmain();\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/update-snapshots.js","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":2,"message":"'readFileSync' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"readFileSync"},"fix":{"range":[406,419],"text":""},"desc":"Remove unused variable 'readFileSync'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":41,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":109,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updateError' is defined but never used.","line":139,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/validate-data-jsons.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/validate-features.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/validate-json-simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/scripts/validate-layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/analyze-note.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":91,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":91,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":111,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":301,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":301,"endColumn":12}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-env node */\n/* global process, require, module */\nimport dotenv from \"dotenv\";\nimport OpenAI from \"openai\";\nimport { LRUCache } from \"lru-cache\";\nimport crypto from \"crypto\";\n\n// Load .env for Azure OpenAI credentials\ndotenv.config();\n\nconst endpoint = process.env.AZURE_OPENAI_ENDPOINT;\nconst apiKey = process.env.AZURE_OPENAI_API_KEY;\nconst deployment = process.env.AZURE_OPENAI_DEPLOYMENT || \"gpt-4o-mini\";\nconst apiVersion = process.env.AZURE_OPENAI_API_VERSION || \"2024-10-21-preview\";\n\nif (!endpoint || !apiKey || !deployment) {\n  throw new Error(\"Missing Azure OpenAI environment variables\");\n}\n\nconst openai = new OpenAI({\n  apiKey,\n  baseURL: `${endpoint}/openai/deployments/${deployment}`,\n  defaultHeaders: {\n    \"api-key\": apiKey,\n    \"azure-openai-api-version\": apiVersion,\n  },\n});\n\n// LRU Cache for repeated note analyses (max 100 entries, 1 hour TTL)\nconst analysisCache = new LRUCache({\n  max: 100,\n  ttl: 1000 * 60 * 60, // 1 hour\n  updateAgeOnGet: true,\n});\n\n/**\n * Calculate confidence score with multi-factor analysis\n * @param {any} parsed - Parsed AI response\n * @param {string} noteText - Original note text for context\n * @returns {number} Confidence score (0-1)\n */\nfunction calculateConfidence(parsed, noteText) {\n  let score = 0;\n  const factors = [];\n\n  // Factor 1: Completeness of clinical data (0-0.25)\n  const hasVitals = /BP.*\\d+\\/\\d+|HR.*\\d+|RR.*\\d+/i.test(noteText);\n  const hasLabs = /BNP|troponin|creatinine|potassium/i.test(noteText);\n  const hasEKG = /EKG|ECG|ST.*elevation|Q.*wave/i.test(noteText);\n  const dataScore = (hasVitals ? 0.1 : 0) + (hasLabs ? 0.1 : 0) + (hasEKG ? 0.05 : 0);\n  score += dataScore;\n  factors.push(`Data completeness: ${dataScore.toFixed(2)}`);\n\n  // Factor 2: Assessment quality (0-0.30)\n  if (Array.isArray(parsed.assessment) && parsed.assessment.length > 0) {\n    const hasEvidence = parsed.assessment.some(a => \n      typeof a === 'string' && (a.includes('given') || a.includes('based on') || a.includes('due to'))\n    );\n    const hasSeverity = parsed.assessment.some(a => \n      typeof a === 'string' && /acute|chronic|severe|mild|stable|unstable/i.test(a)\n    );\n    const assessmentScore = 0.15 + (hasEvidence ? 0.1 : 0) + (hasSeverity ? 0.05 : 0);\n    score += assessmentScore;\n    factors.push(`Assessment quality: ${assessmentScore.toFixed(2)}`);\n  }\n\n  // Factor 3: Plan specificity (0-0.25)\n  if (Array.isArray(parsed.plan) && parsed.plan.length > 0) {\n    const hasDosing = parsed.plan.some(p => typeof p === 'string' && /\\d+\\s*(mg|mcg|units|mL)/i.test(p));\n    const hasTimeline = parsed.plan.some(p => typeof p === 'string' && /daily|q\\d+h|PRN|STAT|urgent/i.test(p));\n    const hasGuideline = parsed.plan.some(p => typeof p === 'string' && /ACC|AHA|ESC|guideline|class\\s+[I]+/i.test(p));\n    const planScore = 0.1 + (hasDosing ? 0.05 : 0) + (hasTimeline ? 0.05 : 0) + (hasGuideline ? 0.05 : 0);\n    score += planScore;\n    factors.push(`Plan specificity: ${planScore.toFixed(2)}`);\n  }\n\n  // Factor 4: Guideline support (0-0.20)\n  if (Array.isArray(parsed.citations) && parsed.citations.length > 0) {\n    const guidelineScore = Math.min(0.20, parsed.citations.length * 0.07);\n    score += guidelineScore;\n    factors.push(`Guideline support: ${guidelineScore.toFixed(2)}`);\n  }\n\n  // Factor 5: Clinical reasoning chain (0-0.10)\n  if (parsed.reasoning && typeof parsed.reasoning === 'string' && parsed.reasoning.length > 50) {\n    score += 0.10;\n    factors.push('Reasoning provided: 0.10');\n  }\n\n  if (process.env.DEBUG_TELEMETRY === \"true\") {\n    console.log('[Confidence Factors]:', factors.join(', '), '→', score.toFixed(2));\n  }\n  \n  return Math.min(score, 1.0);\n}\n\n/**\n * Log telemetry data (latency, cache hit, confidence)\n * @param {string} operation\n * @param {any} data\n */\nfunction logTelemetry(operation, data) {\n  const telemetry = {\n    timestamp: new Date().toISOString(),\n    operation,\n    ...data,\n  };\n  \n  // Log to console (can be extended to Azure Application Insights)\n  if (process.env.DEBUG_TELEMETRY === \"true\") {\n    console.log(\"[TELEMETRY]\", JSON.stringify(telemetry));\n  }\n  \n  // TODO: Send to Azure Application Insights\n  // trackEvent({ name: operation, properties: telemetry });\n}\n\n/**\n * Run parser and AI analyzer in parallel\n * @param {string} noteText\n * @param {Function} parserFn - Parser function to run concurrently\n * @param {{ useCache?: boolean }} options\n * @returns {Promise<{ parsed: any, analysis: any }>}\n */\nexport async function analyzeNoteParallel(noteText, parserFn, options = {}) {\n  const startTime = Date.now();\n  \n  // Run parser and AI analysis concurrently\n  const [parsed, analysis] = await Promise.all([\n    parserFn(noteText),\n    analyzeNote(noteText, options),\n  ]);\n  \n  const totalLatency = Date.now() - startTime;\n  \n  logTelemetry(\"analyzeNoteParallel\", {\n    totalLatency,\n    cached: analysis.cached,\n    confidence: analysis.confidence,\n  });\n  \n  return { parsed, analysis };\n}\n\n/**\n * Generate semantic hash for note (ignores formatting, whitespace, PHI)\n * @param {string} noteText - Raw note\n * @returns {string} Semantic hash\n */\nfunction semanticHash(noteText) {\n  // Normalize text\n  const normalized = noteText\n    .toLowerCase()\n    .replace(/\\s+/g, ' ')\n    .replace(/[^\\w\\s]/g, '')\n    .trim();\n  \n  // Extract clinical entities only (ignore patient names, MRNs)\n  const entities = [];\n  \n  // Extract vitals\n  const vitalsMatch = normalized.match(/(?:bp|hr|rr|temp|o2sat|spo2)[:\\s]*\\d+/g);\n  if (vitalsMatch) entities.push(...vitalsMatch);\n  \n  // Extract diagnosis/assessment\n  const diagnosisMatch = normalized.match(/(?:assessment|diagnosis|impression)[:\\s]*([^.]+)/);\n  if (diagnosisMatch) entities.push(diagnosisMatch[1]);\n  \n  // Extract medications\n  const medsMatch = normalized.match(/(?:medications|meds)[:\\s]*([^.]+)/);\n  if (medsMatch) entities.push(medsMatch[1]);\n  \n  // Extract labs\n  const labsMatch = normalized.match(/(?:labs|laboratory)[:\\s]*([^.]+)/);\n  if (labsMatch) entities.push(labsMatch[1]);\n  \n  // Hash entity string\n  const entityString = entities.sort().join('|');\n  return crypto.createHash('sha256').update(entityString).digest('hex');\n}\n\n/**\n * Analyze a clinical note using Azure OpenAI GPT-4\n * @param {string} noteText\n * @param {{ useCache?: boolean; parallel?: boolean }} options\n * @returns {Promise<{ assessment: any[], plan: any[], citations: any[], confidence?: number, cached?: boolean, latency?: number }>} \n */\nexport async function analyzeNote(noteText, options = {}) {\n  const { useCache = true } = options;\n  const startTime = Date.now();\n  \n  // Generate semantic cache key from clinical entities\n  const cacheKey = semanticHash(noteText);\n  \n  // Check cache first\n  if (useCache && analysisCache.has(cacheKey)) {\n    const cached = /** @type {any} */ (analysisCache.get(cacheKey));\n    return { ...cached, cached: true, latency: Date.now() - startTime };\n  }\n  \n  // Enhanced prompt with clinical reasoning\n  const systemPrompt = `You are an expert cardiologist with 20+ years of clinical experience. Analyze notes with:\n\nCLINICAL REASONING RULES:\n1. Extract ONLY explicitly stated findings - never infer unstated conditions\n2. Use temporal reasoning (acute vs chronic presentations)\n3. Consider differential diagnoses before final assessment\n4. Flag incomplete data that affects clinical decisions\n5. Prioritize life-threatening conditions (STEMI, PE, tamponade)\n\nASSESSMENT FORMAT:\n- Primary diagnosis with supporting evidence\n- Severity stratification (stable/unstable/critical)\n- Risk factors and prognostic indicators\n- Gaps in workup requiring additional data\n\nPLAN FORMAT:\n- STAT interventions if indicated\n- Evidence-based therapies with guideline references (ACC/AHA class I-III)\n- Monitoring parameters with target values\n- Consultation triggers\n- Disposition rationale\n\nQUALITY CHECKS:\n- Cross-validate vitals with assessment (e.g., hypotension + chest pain → cardiogenic shock?)\n- Check medication dosing against renal function\n- Verify anticoagulation safety (bleeding risk)\n- Flag drug interactions\n\nReturn JSON:\n{\n  \"assessment\": [\"diagnosis 1: rationale\", \"diagnosis 2: rationale\"],\n  \"plan\": [\"action 1: class I recommendation (GUIDELINE)\", \"action 2: class IIa (GUIDELINE)\"],\n  \"citations\": [{\"source\": \"guideline name\", \"evidence\": \"specific recommendation\"}],\n  \"confidence\": 0.0-1.0,\n  \"clinicalFlags\": [\"incomplete troponin series\", \"unknown baseline renal function\"],\n  \"reasoning\": \"brief clinical reasoning chain\"\n}`;\n\n  const prompt = `Analyze the following clinical note:\\n\\n${noteText}`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: deployment,\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: prompt },\n      ],\n      temperature: 0.2,\n      max_tokens: 1500,\n    });\n    const aiText = response.choices[0]?.message?.content || \"\";\n    // Parse JSON from AI response\n    let parsed;\n    try {\n      parsed = JSON.parse(aiText);\n    } catch {\n      // Fail-soft: return empty structure if parsing fails\n      return { assessment: [], plan: [], citations: [], confidence: 0, cached: false, latency: Date.now() - startTime };\n    }\n    \n    // Calculate confidence score with multi-factor analysis\n    const confidence = calculateConfidence(parsed, noteText);\n    const result = { ...parsed, confidence, cached: false, latency: Date.now() - startTime };\n    \n    // Log telemetry\n    logTelemetry(\"analyzeNote\", {\n      latency: result.latency,\n      confidence,\n      cached: false,\n      assessmentCount: parsed.assessment?.length || 0,\n      planCount: parsed.plan?.length || 0,\n      citationsCount: parsed.citations?.length || 0,\n    });\n    \n    // Cache the result\n    if (useCache) {\n      analysisCache.set(cacheKey, result);\n    }\n    \n    return result;\n  } catch {\n    // Fail-soft fallback: return empty structure\n    const fallbackResult = { assessment: [], plan: [], citations: [], confidence: 0, cached: false, latency: Date.now() - startTime };\n    \n    logTelemetry(\"analyzeNote\", {\n      latency: fallbackResult.latency,\n      confidence: 0,\n      cached: false,\n      error: true,\n    });\n    \n    return fallbackResult;\n  }\n}\n\n// Example usage (for testing)\nif (require.main === module) {\n  const testNote = \"Patient presents with chest pain and history of hypertension. EKG shows ST elevation.\";\n  analyzeNote(testNote).then(result => {\n    console.log(\"AI Analysis:\", JSON.stringify(result, null, 2));\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/helpers/citation-viewer.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":53,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":57,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":57,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":60,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":60,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":70,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":81,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":81,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":82,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":89,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":89,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":98,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":98,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":99,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":99,"endColumn":9}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Citation Viewer UI Component\n * Interactive modal for viewing linked guidelines/PDFs\n */\n\n/**\n * Create citation modal HTML\n * @param {Array} citations - Array of citation objects with source and evidence\n * @returns {string} HTML string for modal\n */\nexport function createCitationModal(citations) {\n  if (!citations || citations.length === 0) {\n    return '<div class=\"no-citations\">No citations available</div>';\n  }\n\n  const citationItems = citations\n    .map(\n      (citation, index) => `\n    <div class=\"citation-item\" data-index=\"${index}\">\n      <div class=\"citation-header\">\n        <span class=\"citation-number\">[${index + 1}]</span>\n        <h4 class=\"citation-source\">${citation.source || 'Unknown Source'}</h4>\n      </div>\n      <div class=\"citation-evidence\">\n        ${citation.evidence || 'No evidence provided'}\n      </div>\n      ${citation.url ? `<a href=\"${citation.url}\" target=\"_blank\" class=\"citation-link\">View Full Document →</a>` : ''}\n    </div>\n  `\n    )\n    .join('');\n\n  return `\n    <div class=\"citation-modal\" id=\"citationModal\">\n      <div class=\"citation-modal-content\">\n        <div class=\"citation-modal-header\">\n          <h3>Clinical Citations</h3>\n          <button class=\"citation-modal-close\" onclick=\"closeCitationModal()\">&times;</button>\n        </div>\n        <div class=\"citation-modal-body\">\n          ${citationItems}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Show citation modal\n * @param {Array} citations\n */\nexport function showCitationModal(citations) {\n  const modal = document.getElementById('citationModal');\n  if (!modal) {\n    // Create modal if it doesn't exist\n    const modalHTML = createCitationModal(citations);\n    document.body.insertAdjacentHTML('beforeend', modalHTML);\n  }\n  \n  const modalElement = document.getElementById('citationModal');\n  if (modalElement) {\n    modalElement.style.display = 'block';\n  }\n}\n\n/**\n * Close citation modal\n */\nexport function closeCitationModal() {\n  const modal = document.getElementById('citationModal');\n  if (modal) {\n    modal.style.display = 'none';\n  }\n}\n\n/**\n * Initialize citation modal event listeners\n */\nexport function initCitationModal() {\n  // Close modal when clicking outside\n  window.addEventListener('click', (event) => {\n    const modal = document.getElementById('citationModal');\n    if (event.target === modal) {\n      closeCitationModal();\n    }\n  });\n  \n  // Close modal on Escape key\n  window.addEventListener('keydown', (event) => {\n    if (event.key === 'Escape') {\n      closeCitationModal();\n    }\n  });\n}\n\n// Make functions available globally for onclick handlers\nif (typeof window !== 'undefined') {\n  window.showCitationModal = showCitationModal;\n  window.closeCitationModal = closeCitationModal;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/helpers/gpt4-analyzer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/helpers/hpi-paraphraser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/helpers/metrics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/helpers/rest-search.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":45,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-env node */\n\n/**\n * REST API fallback for Azure Search when SDK returns empty results\n * @param {string} endpoint - Azure Search endpoint URL\n * @param {string} indexName - Index name\n * @param {string} apiKey - Query API key\n * @param {string} query - Search query\n * @param {any} options - Search options\n */\nexport async function restSearch(endpoint, indexName, apiKey, query, options = {}) {\n  const { top = 10, skip = 0, select, orderby, filters, semantic, includeTotalCount = true } = options;\n  \n  const apiVersion = \"2024-07-01\";\n  const url = `${endpoint}/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n  \n  /** @type {any} */\n  const body = {\n    search: query || \"*\",\n    top,\n    skip,\n    count: includeTotalCount,\n  };\n  \n  if (select && Array.isArray(select) && select.length) {\n    body.select = select.join(\",\");\n  }\n  \n  if (orderby) {\n    body.orderby = orderby;\n  }\n  \n  if (filters) {\n    body.filter = filters;\n  }\n  \n  // Semantic search configuration\n  if (semantic) {\n    body.queryType = \"semantic\";\n    body.semanticConfiguration = semantic;\n    body.captions = \"extractive\";\n    body.answers = \"extractive|count-3\";\n  }\n  \n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"api-key\": apiKey,\n    },\n    body: JSON.stringify(body),\n  });\n  \n  if (!response.ok) {\n    const text = await response.text();\n    const err = new Error(`REST search failed ${response.status}: ${text}`);\n    // @ts-ignore augment error with status for retry filter\n    err.status = response.status;\n    throw err;\n  }\n  \n  const json = await response.json();\n  return json;\n}\n\n/**\n * Check if an object has any enumerable properties\n * @param {any} obj\n */\nexport function hasEnumerableProps(obj) {\n  if (!obj || typeof obj !== \"object\") return false;\n  return Object.keys(obj).length > 0;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/helpers/retry.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":38,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-env node */\n\n/**\n * Exponential backoff with optional jitter and retry filter.\n * @template T\n * @param {() => Promise<T>} fn\n * @param {{\n *   retries?: number,\n *   baseMs?: number,\n *   maxMs?: number,\n *   jitter?: boolean,\n *   retryOn?: (err: any) => boolean\n * }} [opts]\n * @returns {Promise<T>}\n */\nexport async function withBackoff(fn, opts = {}) {\n  const {\n    retries = 4,\n    baseMs = 200,\n    maxMs = 4000,\n    jitter = true,\n    retryOn = (err) => {\n      const s = err?.status ?? err?.statusCode ?? err?.response?.status;\n      return s === 429 || (s >= 500 && s < 600);\n    },\n  } = opts;\n\n  let attempt = 0;\n  /** @type {any} */\n  let lastErr;\n  while (attempt <= retries) {\n    try {\n      return await fn();\n    } catch (e) {\n      lastErr = e;\n      if (!retryOn(e) || attempt === retries) throw e;\n      const delay = Math.min(maxMs, baseMs * 2 ** attempt) * (jitter ? 0.75 + Math.random() * 0.5 : 1);\n      await new Promise((r) => setTimeout(r, delay));\n      attempt++;\n    }\n  }\n  throw lastErr;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/helpers/search-normalize.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_ignored' is assigned a value but never used.","line":8,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"_ignored"},"fix":{"range":[332,360],"text":""},"desc":"Remove unused variable '_ignored'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// helpers/search-normalize.js\n// JS version of the provided TypeScript snippet\n\nfunction extractDoc(hit) {\n  if (hit && typeof hit.document === \"object\") return hit.document;\n  if (hit && typeof hit._source === \"object\") return hit._source;\n  if (hit && typeof hit.documentFields === \"object\") return hit.documentFields;\n  const { [\"@search.score\"]: _ignored, ...rest } = hit || {};\n  return rest && typeof rest === \"object\" ? rest : {};\n}\n\nfunction extractScore(hit) {\n  if (hit && typeof hit.score === \"number\") return hit.score;\n  if (hit && typeof hit._score === \"number\") return hit._score;\n  if (hit && typeof hit[\"@search.score\"] === \"number\") return hit[\"@search.score\"];\n  return undefined;\n}\n\nfunction extractId(doc) {\n  return doc?.id ?? doc?.key ?? doc?.documentId ?? doc?.[\"@search.documentId\"] ?? doc?._id;\n}\n\nexport function normalizeHit(hit) {\n  const doc = extractDoc(hit);\n  const score = extractScore(hit);\n  const id = extractId(doc);\n  return { id, score, ...doc };\n}\n\nexport function normalizeResultContainer(r) {\n  if (Array.isArray(r)) return r;\n  if (Array.isArray(r?.results)) return r.results;\n  if (Array.isArray(r?.value)) return r.value;\n  if (Array.isArray(r?.hits)) return r.hits;\n  return [];\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/helpers/telemetry.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":18,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":29,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":32,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":50,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":50,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":63,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":63,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":76,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":76,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":101,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":56},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":116,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":116,"endColumn":56},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":129,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":129,"endColumn":56}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-env node */\n/* global process */\n\nimport { useAzureMonitor } from \"@azure/monitor-opentelemetry\";\nimport { logs } from \"@opentelemetry/api-logs\";\nimport { metrics } from \"@opentelemetry/api\";\n\n/**\n * Initialize Azure Monitor OpenTelemetry exporter if configured.\n * Reads either APPLICATIONINSIGHTS_CONNECTION_STRING or APPINSIGHTS_INSTRUMENTATIONKEY.\n */\nexport function initTelemetry() {\n  const conn = process.env.APPLICATIONINSIGHTS_CONNECTION_STRING;\n  const ikey = process.env.APPINSIGHTS_INSTRUMENTATIONKEY;\n\n  if (!conn && !ikey) {\n    if (process.env.DEBUG_TELEMETRY === \"true\") {\n      console.log(\"[telemetry] App Insights not configured (set APPINSIGHTS_INSTRUMENTATIONKEY or APPLICATIONINSIGHTS_CONNECTION_STRING)\");\n    }\n    return;\n  }\n\n  const connectionString = conn || `InstrumentationKey=${ikey}`;\n  try {\n    useAzureMonitor({\n      azureMonitorExporterOptions: { connectionString },\n    });\n    if (process.env.DEBUG_TELEMETRY === \"true\") {\n      console.log(\"[telemetry] Azure Monitor OpenTelemetry initialized\");\n    }\n  } catch (err) {\n    console.error(\"[telemetry] Initialization failed:\", /** @type {any} */ (err)?.message || err);\n  }\n\n  // Initialize custom metrics\n  try {\n    meter = metrics.getMeter(\"ai-search\", \"1.0.0\");\n    cacheHitCounter = meter.createCounter(\"ai.cache.hits\", {\n      description: \"Count of analysis cache hits\",\n    });\n    analysisLatencyHistogram = meter.createHistogram(\"ai.analysis.latency\", {\n      description: \"Latency of AI analysis in milliseconds\",\n      unit: \"ms\",\n    });\n    restFallbackCounter = meter.createCounter(\"ai.search.rest.fallbacks\", {\n      description: \"Count of times REST search fallback was used\",\n    });\n  } catch (err) {\n    if (process.env.DEBUG_TELEMETRY === \"true\") {\n      console.log(\"[telemetry] metrics init failed:\", /** @type {any} */ (err)?.message || err);\n    }\n  }\n}\n\n/**\n * Emit a telemetry log with custom dimensions (goes to App Insights 'traces').\n * @param {string} message\n * @param {Record<string, any>} properties\n */\nexport function logAIEvent(message, properties = {}) {\n  if (process.env.DEBUG_TELEMETRY === \"true\") {\n    const safe = { ...properties };\n    console.log(\"[TELEMETRY]\", message, JSON.stringify(safe));\n  }\n\n  // If Azure Monitor is not configured, this will no-op silently.\n  try {\n    const logger = logs.getLogger(\"ai-search\", \"1.0.0\");\n    // Emit a simple log record with attributes (mapped to customDimensions)\n    logger.emit({\n      body: message,\n      attributes: properties,\n    });\n  } catch (err) {\n    if (process.env.DEBUG_TELEMETRY === \"true\") {\n      console.log(\"[telemetry] emit failed:\", /** @type {any} */ (err)?.message || err);\n    }\n  }\n}\n\n// ---- Custom Metrics ----\n/** @type {import(\"@opentelemetry/api\").Meter | undefined} */\nlet meter;\n/** @type {import(\"@opentelemetry/api\").Counter | undefined} */\nlet cacheHitCounter;\n/** @type {import(\"@opentelemetry/api\").Histogram | undefined} */\nlet analysisLatencyHistogram;\n/** @type {import(\"@opentelemetry/api\").Counter | undefined} */\nlet restFallbackCounter;\n\n/**\n * Record a cache hit metric for the analyzer cache.\n * @param {boolean} hit\n */\nexport function recordCacheHit(hit) {\n  if (!hit || !cacheHitCounter) return;\n  try {\n    cacheHitCounter.add(1);\n  } catch (err) {\n    const msg = /** @type {any} */ (err)?.message || err;\n    if (process.env.DEBUG_TELEMETRY === \"true\") console.log(\"[telemetry] recordCacheHit failed\", msg);\n  }\n}\n\n/**\n * Record analysis latency in milliseconds with optional attributes.\n * @param {number} ms\n * @param {Record<string, string | number | boolean>} [attributes]\n */\nexport function recordAnalysisLatency(ms, attributes = {}) {\n  if (!analysisLatencyHistogram || typeof ms !== \"number\" || !Number.isFinite(ms)) return;\n  try {\n    analysisLatencyHistogram.record(ms, attributes);\n  } catch (err) {\n    const msg = /** @type {any} */ (err)?.message || err;\n    if (process.env.DEBUG_TELEMETRY === \"true\") console.log(\"[telemetry] recordAnalysisLatency failed\", msg);\n  }\n}\n\n/**\n * Record that REST fallback was used for search.\n */\nexport function recordRestFallback() {\n  if (!restFallbackCounter) return;\n  try {\n    restFallbackCounter.add(1);\n  } catch (err) {\n    const msg = /** @type {any} */ (err)?.message || err;\n    if (process.env.DEBUG_TELEMETRY === \"true\") console.log(\"[telemetry] recordRestFallback failed\", msg);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/printEnv.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":7,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":7,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":8,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":8,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":9,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":9,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":10,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":10,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":10,"column":62,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":69}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import dotenv from 'dotenv';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\ndotenv.config({ path: path.join(__dirname, '.env') });\nconsole.log('endpoint=', process.env.AZURE_SEARCH_ENDPOINT);\nconsole.log('index=', process.env.AZURE_SEARCH_INDEX);\nconsole.log('keyPresent=', !!process.env.AZURE_SEARCH_QUERY_KEY);\nconsole.log('PORT value=', process.env.PORT, 'type=', typeof process.env.PORT);\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/rag/azureSearchClient.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/rag/retrieveMaterials.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/rag/textUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/routes/analyze-note.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/routes/paraphrase-hpi.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/routes/search.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":141,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":141,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":158,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":158,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":170,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":170,"endColumn":27}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-env node */\n/* global process */\nimport { normalizeHit, normalizeResultContainer } from \"../helpers/search-normalize.js\";\nimport { restSearch, hasEnumerableProps } from \"../helpers/rest-search.js\";\nimport { withBackoff } from \"../helpers/retry.js\";\nimport { recordRestFallback } from \"../helpers/telemetry.js\";\n\nconst MAX_TOP = 50;\nconst DEBUG = process.env.DEBUG_SEARCH === \"true\";\n\n/**\n * @param {unknown} n\n */\nfunction clampTop(n) {\n  const v = Number(n);\n  return Number.isFinite(v) ? Math.max(1, Math.min(MAX_TOP, v)) : 10;\n}\n\n/**\n * @param {import(\"express\").Application} app\n * @param {import(\"@azure/search-documents\").SearchClient<any>} client\n * @param {{ endpoint: string; indexName: string; apiKey: string }} credentials\n */\nexport default function registerSearchRoutes(app, client, credentials) {\n  // credentials are passed through to runSearch; no direct use here to avoid unused vars\n\n  // GET /search?query=...&top=5&skip=0&select=field1,field2&orderby=...&filters=...&semantic=...&facets=f1,f2\n  app.get(\"/search\", async (req, res) => {\n    const q = String(req.query.query ?? \"\");\n    const top = clampTop(req.query.top);\n    const skip = Number(req.query.skip ?? 0) || 0;\n    const select = (req.query.select ? String(req.query.select) : \"\")\n      .split(\",\")\n      .filter(Boolean);\n    const orderby = req.query.orderby ? String(req.query.orderby) : undefined;\n    const filters = req.query.filters ? String(req.query.filters) : undefined;\n    const semantic = req.query.semantic ? String(req.query.semantic) : undefined;\n    const facets = req.query.facets ? String(req.query.facets).split(\",\").filter(Boolean) : undefined;\n\n    await runSearch({ q, top, skip, select, orderby, filters, semantic, facets }, res, client, credentials);\n  });\n\n  // POST /search  { q, top, skip, select[], orderby, filters, semantic, vector, facets }\n  app.post(\"/search\", async (req, res) => {\n    const {\n      q = \"\",\n      top = 10,\n      skip = 0,\n      select = [],\n      orderby,\n      filters,\n      semantic,\n      vector, // optional: { fields: \"vectorField\", k: 10, vector: number[] }\n      facets, // optional: string[] of fields\n    } = req.body || {};\n\n    await runSearch({ q, top: clampTop(top), skip, select, orderby, filters, semantic, vector, facets }, res, client, credentials);\n  });\n}\n\n/**\n * @param {{ q: string; top: number; skip: number; select: string[]; orderby?: string; filters?: string; semantic?: string; vector?: { vector: number[]; k?: number; fields: string }; facets?: string[] }} opts\n * @param {import('express').Response} res\n * @param {import(\"@azure/search-documents\").SearchClient<any>} client\n * @param {{ endpoint: string; indexName: string; apiKey: string }} credentials\n */\nasync function runSearch(opts, res, client, credentials) {\n  try {\n    const { q, top, skip, select, orderby, filters, semantic, vector, facets } = opts;\n    const { endpoint, indexName, apiKey } = credentials;\n\n    /** @type {any} */\n    const searchOptions = {\n      top,\n      skip,\n      select: Array.isArray(select) && select.length ? select : undefined,\n      orderBy: orderby ? [orderby] : undefined,\n      filter: filters || undefined,\n      includeTotalCount: true,\n      facets,\n    };\n\n    // Semantic ranking (if configured)\n    if (semantic) {\n      searchOptions.queryType = \"semantic\";\n      searchOptions.semanticConfiguration = semantic;\n      searchOptions.captions = \"extractive\";\n      searchOptions.answers = \"extractive|count-3\";\n    }\n\n    // Vector/hybrid\n    /** @type {any} */\n    let iteratorOrObject;\n    if (vector && Array.isArray(vector.vector) && vector.vector.length && vector.fields) {\n      searchOptions.vector = {\n        value: vector.vector,\n        kNearestNeighborsCount: Number(vector.k ?? top),\n        fields: vector.fields,\n      };\n      iteratorOrObject = client.search(q, searchOptions);\n    } else {\n      iteratorOrObject = client.search(q, searchOptions);\n    }\n\n    const rows = [];\n\n    // Try byPage first for a consistent first-page shape across SDKs\n    if (iteratorOrObject && typeof /** @type {any} */ (iteratorOrObject).byPage === \"function\") {\n      try {\n        const pager = /** @type {any} */ (iteratorOrObject).byPage({ maxPageSize: top });\n        const first = await pager.next();\n        const page = first?.value;\n        if (Array.isArray(page)) {\n          rows.push(...page);\n        } else if (page && Array.isArray(page.results)) {\n          rows.push(...page.results);\n        } else if (page && Array.isArray(page.value)) {\n          rows.push(...page.value);\n        }\n      } catch {\n        // ignore and fall back\n      }\n    }\n\n    // Fallback: iterate over hits\n    if (rows.length === 0 && iteratorOrObject && typeof /** @type {any} */ (iteratorOrObject)[Symbol.asyncIterator] === \"function\") {\n      let i = 0;\n      for await (const hit of iteratorOrObject) {\n        rows.push(hit);\n        if (++i >= top) break;\n      }\n    }\n\n    // Final fallback: attempt to normalize as a container\n    if (rows.length === 0) {\n      rows.push(...normalizeResultContainer(iteratorOrObject));\n    }\n\n    // SDK fallback to REST API if we still have no results\n    if (rows.length === 0 && !hasEnumerableProps(iteratorOrObject)) {\n      if (DEBUG) console.log(\"[search] SDK returned empty proxy, falling back to REST API\");\n      try {\n        const restResult = await withBackoff(() => restSearch(endpoint, indexName, apiKey, q || \"*\", {\n          top,\n          skip,\n          select,\n          orderby,\n          filters,\n          semantic,\n          includeTotalCount: true,\n        }));\n        \n        // REST API returns { value: [...], @odata.count: N }\n        if (restResult && Array.isArray(restResult.value)) {\n          rows.push(...restResult.value);\n        }\n        try { recordRestFallback(); } catch (err) {\n          if (DEBUG) console.log(\"[search] recordRestFallback failed\", /** @type {any} */(err)?.message || err);\n        }\n        \n        const restCount = restResult?.[\"@odata.count\"] ?? restResult?.count;\n        const results = rows.map(normalizeHit);\n        return res.json({ \n          ok: true, \n          count: restCount ?? results.length, \n          results, \n          diagnostics: { top, skip, semantic: !!semantic, hybrid: !!vector, method: \"REST\" } \n        });\n      } catch (restErr) {\n        if (DEBUG) console.error(\"[search] REST fallback failed:\", restErr);\n        // Continue to normal response with empty results\n      }\n    }\n\n    let total =\n      /** @type {any} */ (iteratorOrObject)?.count ??\n      undefined;\n\n    // If total is undefined, try to infer from first page\n    if (total == null && iteratorOrObject && typeof /** @type {any} */ (iteratorOrObject).byPage === \"function\") {\n      try {\n        const pager = /** @type {any} */ (iteratorOrObject).byPage({ maxPageSize: 1 });\n        const first = await pager.next();\n        const page = first?.value;\n        if (page) {\n          total = page.count ?? page.totalCount ?? page[\"@odata.count\"];\n        }\n      } catch {\n        // ignore\n      }\n    }\n\n    const results = rows.map(normalizeHit);\n    res.json({ ok: true, count: total ?? results.length, results, diagnostics: { top, skip, semantic: !!semantic, hybrid: !!vector } });\n  } catch (/** @type {any} */ e) {\n    res.status(500).json({ ok: false, code: e?.statusCode ?? e?.code, error: e?.message || String(e) });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/test-enhancements-standalone.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":29,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":30,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":82,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":122,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":122,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":149,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":149,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":150,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":150,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":156,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":156,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":159,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":159,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":162,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":162,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":165,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":165,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":169,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":169,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":174,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":174,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":177,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":177,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":178,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":178,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":179,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":179,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":180,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":180,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":181,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":181,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":184,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":184,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":187,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":187,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":191,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":191,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":196,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":196,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":199,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":199,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":200,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":200,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":201,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":201,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":204,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":204,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":207,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":207,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":211,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":211,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":216,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":216,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'parsed' is assigned a value but never used.","line":220,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":220,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"parsed"},"fix":{"range":[6446,6488],"text":""},"desc":"Remove unused variable 'parsed'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'analysis' is assigned a value but never used.","line":221,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":221,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"analysis"},"fix":{"range":[6493,6563],"text":""},"desc":"Remove unused variable 'analysis'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'parsedParallel' is assigned a value but never used.","line":225,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":225,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"parsedParallel"},"fix":{"range":[6650,6673],"text":""},"desc":"Remove unused variable 'parsedParallel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'analysisParallel' is assigned a value but never used.","line":225,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":225,"endColumn":63,"suggestions":[{"messageId":"removeVar","data":{"varName":"analysisParallel"},"fix":{"range":[6672,6700],"text":""},"desc":"Remove unused variable 'analysisParallel'."}]},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":229,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":229,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":230,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":230,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":231,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":231,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":234,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":234,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":237,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":237,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":241,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":241,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":246,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":246,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":248,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":248,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":249,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":249,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":251,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":251,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":254,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":254,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":257,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":257,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":260,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":260,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":264,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":264,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":269,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":269,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":270,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":270,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":271,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":271,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":272,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":272,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":273,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":273,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":276,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":276,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":278,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":278,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":281,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":281,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":288,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":288,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":290,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":290,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":291,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":291,"endColumn":12}],"suppressedMessages":[],"errorCount":57,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-env node */\n/**\n * Standalone Test Suite for AI Search Enhancements\n * Tests confidence scoring, caching, parallel execution without requiring live Azure OpenAI credentials\n */\n\nimport { LRUCache } from 'lru-cache';\nimport crypto from 'crypto';\n\n// ===== MOCK FUNCTIONS (mimic analyze-note.js behavior) =====\n\nconst mockCache = new LRUCache({\n  max: 100,\n  ttl: 1000 * 60 * 60, // 1 hour\n  updateAgeOnGet: true,\n});\n\nfunction calculateConfidence(parsedResponse) {\n  let score = 0.0;\n  \n  if (parsedResponse.assessment?.length > 0) score += 0.4;\n  if (parsedResponse.plan?.length > 0) score += 0.4;\n  if (parsedResponse.citations?.length > 0) score += 0.2;\n  \n  return Math.min(1.0, Math.max(0.0, score));\n}\n\nfunction logTelemetry(operation, data) {\n  if (process.env.DEBUG_TELEMETRY === 'true') {\n    console.log(`[TELEMETRY] ${operation}:`, JSON.stringify(data, null, 2));\n  }\n}\n\nfunction mockOpenAIResponse() {\n  return {\n    assessment: [\n      'Acute inferior STEMI with ST elevation in leads II, III, aVF',\n      'High-risk presentation with 2-hour symptom duration'\n    ],\n    plan: [\n      'STEMI protocol activated - cardiac catheterization',\n      'Dual antiplatelet therapy initiated',\n      'Monitor for reperfusion arrhythmias'\n    ],\n    citations: [\n      {\n        source: 'ACC/AHA 2013 STEMI Guidelines',\n        evidence: 'Door-to-balloon time <90 minutes for primary PCI',\n        url: 'https://www.ahajournals.org/doi/10.1161/CIR.0b013e3182742cf6'\n      },\n      {\n        source: '2017 ESC STEMI Guidelines',\n        evidence: 'Pre-hospital ECG and STEMI alert systems improve outcomes',\n        url: 'https://academic.oup.com/eurheartj/article/39/2/119/4095042'\n      }\n    ]\n  };\n}\n\nasync function mockAnalyzeNote(noteText, options = {}) {\n  const startTime = Date.now();\n  const useCache = options.useCache !== false;\n  \n  // Generate cache key\n  const cacheKey = crypto.createHash('sha256').update(noteText).digest('hex');\n  \n  // Check cache\n  if (useCache) {\n    const cached = mockCache.get(cacheKey);\n    if (cached) {\n      const latency = Date.now() - startTime;\n      logTelemetry('analyzeNote', { cached: true, latency });\n      return {\n        ...cached,\n        cached: true,\n        latency\n      };\n    }\n  }\n  \n  // Simulate API delay (300-500ms)\n  await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 200));\n  \n  const response = mockOpenAIResponse();\n  const confidence = calculateConfidence(response);\n  const latency = Date.now() - startTime;\n  \n  const result = {\n    ...response,\n    confidence,\n    cached: false,\n    latency\n  };\n  \n  // Store in cache\n  if (useCache) {\n    mockCache.set(cacheKey, result);\n  }\n  \n  logTelemetry('analyzeNote', { cached: false, latency, confidence });\n  return result;\n}\n\nasync function mockAnalyzeNoteParallel(noteText, parserFn, options = {}) {\n  const startTime = Date.now();\n  \n  // Execute parser and AI analysis in parallel\n  const [parsed, analysis] = await Promise.all([\n    parserFn(noteText),\n    mockAnalyzeNote(noteText, { ...options, useCache: false })\n  ]);\n  \n  const totalLatency = Date.now() - startTime;\n  logTelemetry('analyzeNoteParallel', { totalLatency });\n  \n  return { parsed, analysis, totalLatency };\n}\n\n// Mock parser for testing\nfunction mockParser(noteText) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        vitals: { hr: 95, bp: '140/90' },\n        chief_complaint: 'Chest pain',\n        extracted_from: noteText.slice(0, 50) + '...',\n      });\n    }, 200); // Simulate 200ms parser latency\n  });\n}\n\n// ===== TEST SUITE =====\n\nconst testNote = `\nPatient: 65yo male\nChief Complaint: Chest pain radiating to left arm, onset 2 hours ago\nPMH: Hypertension, hyperlipidemia\nVitals: BP 140/90, HR 95, O2 98% RA\nEKG: ST elevation in leads II, III, aVF (2-3mm)\nAssessment: Acute inferior STEMI\nPlan: \n- STEMI protocol activated\n- Aspirin 325mg PO given\n- Heparin bolus\n- Emergent cardiac catheterization\n`;\n\nasync function runTests() {\n  console.log('🧪 AI Search Enhancements - Test Suite\\n');\n  console.log('=' .repeat(60));\n  \n  let passCount = 0;\n  let failCount = 0;\n  \n  // Test 1: Confidence Scoring\n  console.log('\\n✓ Test 1: Confidence Score Validation');\n  try {\n    const result = await mockAnalyzeNote(testNote, { useCache: false });\n    console.log(`  Confidence: ${result.confidence.toFixed(2)}`);\n    \n    if (result.confidence >= 0.0 && result.confidence <= 1.0) {\n      console.log('  ✅ PASS - Confidence within 0.0-1.0 range');\n      passCount++;\n    } else {\n      console.log(`  ❌ FAIL - Confidence out of range: ${result.confidence}`);\n      failCount++;\n    }\n  } catch (error) {\n    console.log(`  ❌ FAIL - Error: ${error.message}`);\n    failCount++;\n  }\n  \n  // Test 2: Cache Performance (uncached)\n  console.log('\\n✓ Test 2: Uncached Analysis Performance');\n  try {\n    const result1 = await mockAnalyzeNote(testNote, { useCache: true });\n    console.log(`  Latency: ${result1.latency}ms`);\n    console.log(`  Cached: ${result1.cached}`);\n    console.log(`  Assessment items: ${result1.assessment?.length || 0}`);\n    console.log(`  Plan items: ${result1.plan?.length || 0}`);\n    console.log(`  Citations: ${result1.citations?.length || 0}`);\n    \n    if (result1.latency > 200 && !result1.cached) {\n      console.log('  ✅ PASS - Uncached response took > 200ms');\n      passCount++;\n    } else {\n      console.log(`  ❌ FAIL - Unexpected latency or cache state`);\n      failCount++;\n    }\n  } catch (error) {\n    console.log(`  ❌ FAIL - Error: ${error.message}`);\n    failCount++;\n  }\n  \n  // Test 3: Cache Hit Performance\n  console.log('\\n✓ Test 3: Cached Analysis Performance');\n  try {\n    const result2 = await mockAnalyzeNote(testNote, { useCache: true });\n    console.log(`  Latency: ${result2.latency}ms`);\n    console.log(`  Cached: ${result2.cached}`);\n    console.log(`  Speed-up: ${Math.round(300 / result2.latency)}x faster`);\n    \n    if (result2.cached && result2.latency < 10) {\n      console.log('  ✅ PASS - Cache hit returned in < 10ms');\n      passCount++;\n    } else {\n      console.log(`  ❌ FAIL - Cache miss or slow cache hit`);\n      failCount++;\n    }\n  } catch (error) {\n    console.log(`  ❌ FAIL - Error: ${error.message}`);\n    failCount++;\n  }\n  \n  // Test 4: Parallel Execution\n  console.log('\\n✓ Test 4: Parallel Execution Performance');\n  try {\n    // Sequential timing (parser + analysis)\n    const seqStart = Date.now();\n    const parsed = await mockParser(testNote);\n    const analysis = await mockAnalyzeNote(testNote, { useCache: false });\n    const seqLatency = Date.now() - seqStart;\n    \n    // Parallel timing\n    const { parsed: parsedParallel, analysis: analysisParallel, totalLatency } = \n      await mockAnalyzeNoteParallel(testNote, mockParser);\n    \n    const improvement = ((seqLatency - totalLatency) / seqLatency * 100).toFixed(1);\n    console.log(`  Sequential: ${seqLatency}ms`);\n    console.log(`  Parallel: ${totalLatency}ms`);\n    console.log(`  Improvement: ${improvement}%`);\n    \n    if (totalLatency < seqLatency) {\n      console.log('  ✅ PASS - Parallel execution faster than sequential');\n      passCount++;\n    } else {\n      console.log(`  ❌ FAIL - Parallel not faster (network variance possible)`);\n      failCount++;\n    }\n  } catch (error) {\n    console.log(`  ❌ FAIL - Error: ${error.message}`);\n    failCount++;\n  }\n  \n  // Test 5: Telemetry Logging\n  console.log('\\n✓ Test 5: Telemetry Logging');\n  try {\n    const originalDebug = process.env.DEBUG_TELEMETRY;\n    process.env.DEBUG_TELEMETRY = 'true';\n    \n    console.log('  Enabling telemetry debug mode...');\n    const result = await mockAnalyzeNote(testNote, { useCache: false });\n    \n    process.env.DEBUG_TELEMETRY = originalDebug;\n    \n    if (result.latency && result.confidence !== undefined) {\n      console.log('  ✅ PASS - Telemetry data captured');\n      passCount++;\n    } else {\n      console.log('  ❌ FAIL - Missing telemetry fields');\n      failCount++;\n    }\n  } catch (error) {\n    console.log(`  ❌ FAIL - Error: ${error.message}`);\n    failCount++;\n  }\n  \n  // Summary\n  console.log('\\n' + '='.repeat(60));\n  console.log('📊 Test Results Summary\\n');\n  console.log(`  Tests Passed: ${passCount}/5`);\n  console.log(`  Tests Failed: ${failCount}/5`);\n  console.log(`  Success Rate: ${(passCount / 5 * 100).toFixed(0)}%`);\n  \n  if (failCount === 0) {\n    console.log('\\n🎉 All tests passed! System ready for production.');\n  } else {\n    console.log(`\\n⚠️  ${failCount} test(s) failed. Review output above.`);\n  }\n  \n  console.log('\\n' + '='.repeat(60));\n  \n  return failCount === 0 ? 0 : 1;\n}\n\n// Run tests\nrunTests()\n  .then(exitCode => process.exit(exitCode))\n  .catch(err => {\n    console.error('Fatal test error:', err);\n    process.exit(1);\n  });\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/services/ai-search/test-enhancements.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":8,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":34,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":37,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":39,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":40,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":43,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":45,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":48,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":52,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":53,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":54,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":56,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":61,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":61,"endColumn":27}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-env node */\n/* global process */\nimport { analyzeNote, analyzeNoteParallel } from './analyze-note.js';\n\n// Mock parser function for parallel execution demo\nfunction mockParser(noteText) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        vitals: { hr: 85, bp: '120/80' },\n        chief_complaint: 'Chest pain',\n        extracted_from: noteText.slice(0, 50) + '...',\n      });\n    }, 300);\n  });\n}\n\n// Test note\nconst testNote = `\nPatient: 65yo male\nChief Complaint: Chest pain radiating to left arm, onset 2 hours ago\nPMH: Hypertension, hyperlipidemia\nVitals: BP 140/90, HR 95, O2 98% RA\nEKG: ST elevation in leads II, III, aVF (2-3mm)\nAssessment: Acute inferior STEMI\nPlan: \n- STEMI protocol activated\n- Aspirin 325mg PO given\n- Heparin bolus\n- Emergent cardiac catheterization\n`;\n\nasync function runTests() {\n  console.log('=== Testing AI Note Analyzer Enhancements ===\\n');\n\n  // Test 1: Basic analysis with caching\n  console.log('Test 1: Basic Analysis (uncached)');\n  const result1 = await analyzeNote(testNote, { useCache: true });\n  console.log('Result:', JSON.stringify(result1, null, 2));\n  console.log(`Latency: ${result1.latency}ms, Confidence: ${result1.confidence}, Cached: ${result1.cached}\\n`);\n\n  // Test 2: Cached analysis\n  console.log('Test 2: Cached Analysis');\n  const result2 = await analyzeNote(testNote, { useCache: true });\n  console.log(`Latency: ${result2.latency}ms, Confidence: ${result2.confidence}, Cached: ${result2.cached}\\n`);\n\n  // Test 3: Parallel execution\n  console.log('Test 3: Parallel Execution');\n  const startParallel = Date.now();\n  const { parsed, analysis } = await analyzeNoteParallel(testNote, mockParser, { useCache: false });\n  const parallelLatency = Date.now() - startParallel;\n  console.log('Parser output:', JSON.stringify(parsed, null, 2));\n  console.log('AI analysis:', JSON.stringify(analysis, null, 2));\n  console.log(`Total parallel latency: ${parallelLatency}ms\\n`);\n\n  console.log('=== All Tests Complete ===');\n}\n\n// Run tests if executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runTests().catch(console.error);\n}\n\nexport { runTests };\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/core/app.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/education/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/education/router-integration.example.js","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":2,"message":"'educationRouteExample' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":21,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"educationRouteExample"},"fix":{"range":[755,1749],"text":""},"desc":"Remove unused variable 'educationRouteExample'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'navigationLinkExample' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":61,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"navigationLinkExample"},"fix":{"range":[1969,2264],"text":""},"desc":"Remove unused variable 'navigationLinkExample'."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/guidelines/guidelines.js","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":2,"message":"'formatGuidelinesContent' is defined but never used. Allowed unused vars must match /^_/u.","line":550,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":550,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatGuidelinesContent"},"fix":{"range":[19694,20341],"text":""},"desc":"Remove unused variable 'formatGuidelinesContent'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatTeachingContent' is defined but never used. Allowed unused vars must match /^_/u.","line":571,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":571,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatTeachingContent"},"fix":{"range":[20421,20816],"text":""},"desc":"Remove unused variable 'formatTeachingContent'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatSafetyContent' is defined but never used. Allowed unused vars must match /^_/u.","line":590,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":590,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatSafetyContent"},"fix":{"range":[20894,21368],"text":""},"desc":"Remove unused variable 'formatSafetyContent'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatResourcesContent' is defined but never used. Allowed unused vars must match /^_/u.","line":610,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":610,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatResourcesContent"},"fix":{"range":[21449,21976],"text":""},"desc":"Remove unused variable 'formatResourcesContent'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'generatePlaceholderResources' is defined but never used. Allowed unused vars must match /^_/u.","line":680,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":680,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"generatePlaceholderResources"},"fix":{"range":[24285,24873],"text":""},"desc":"Remove unused variable 'generatePlaceholderResources'."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/aiAnalyzer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/cardiology/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/clinicalSafety.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/entityExtraction.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/evidenceBasedPlan.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/normalize.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/noteParser.js","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":2,"message":"'flagNormalize' is defined but never used. Allowed unused vars must match /^_/u.","line":306,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":306,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"flagNormalize"},"fix":{"range":[10403,10516],"text":""},"desc":"Remove unused variable 'flagNormalize'."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/noteParser.worker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/noteParser_full.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/noteParser_full_async.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/parseNoteCoordinator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/parserChunker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/smartParser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/synonyms.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/parsers/templateRenderer.js","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":2,"message":"'normalizedSections' is defined but never used. Allowed unused args must match /^_/u.","line":432,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":432,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"normalizedSections"},"fix":{"range":[14388,14408],"text":""},"desc":"Remove unused variable 'normalizedSections'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'priorityGroups' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":442,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":442,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"priorityGroups"},"fix":{"range":[14657,15106],"text":""},"desc":"Remove unused variable 'priorityGroups'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-dupe-class-members","severity":2,"message":"Duplicate name 'extractHPIInfo'.","line":2123,"column":3,"nodeType":"MethodDefinition","messageId":"unexpected","endLine":2252,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'lowerHPI' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":2354,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":2354,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"lowerHPI"},"fix":{"range":[92989,93024],"text":""},"desc":"Remove unused variable 'lowerHPI'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":3275,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":3275,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/server/ai-search/azureFileContext.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/utils/debugInstrumentation.js","messages":[],"suppressedMessages":[{"ruleId":"no-undef","severity":2,"message":"'waitForElement' is not defined.","line":545,"column":43,"nodeType":"Identifier","messageId":"undef","endLine":545,"endColumn":57,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'domReady' is not defined.","line":563,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":563,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'waitForCriticalElements' is not defined.","line":564,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":564,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'setupErrorHandlers' is not defined.","line":594,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":594,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'verifySelectors' is not defined.","line":599,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":599,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'initDebugInstrumentation' is not defined.","line":641,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":641,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'initDebugInstrumentation' is not defined.","line":643,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":643,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/utils/diagnosisSanitizer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/utils/jankMonitor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/utils/parserHelpers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/utils/regex.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/utils/sanitizer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/utils/scheduler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/utils/svgSanitizer.browser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/src/utils/svgSanitizer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/sw.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":17,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'caches' is not defined.","line":19,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":22,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":27,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'caches' is not defined.","line":29,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'caches' is not defined.","line":33,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'self' is not defined.","line":40,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":53,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'caches' is not defined.","line":59,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":64,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'caches' is not defined.","line":80,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":80,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":88,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":88,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":91,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":91,"endColumn":18}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const CACHE_NAME = \"cardiology-suite-v3\";\nconst ASSETS_TO_CACHE = [\n  \"./\",\n  \"./index.html\",\n  \"./styles/style.css\",\n  \"./src/core/app.js\",\n  \"./manifest.json\",\n  \"./data/db.json\",\n  \"./data/plan_rules/plan_rules.json\",\n  \"./data/meds/cardiac_meds.json\",\n  \"./data/guidelines/acc_guidelines.json\",\n  \"./data/teaching/teaching_content.json\",\n  \"./data/labs_reference/labs_reference.json\",\n];\n\n// Install event\nself.addEventListener(\"install\", (event) => {\n  event.waitUntil(\n    caches\n      .open(CACHE_NAME)\n      .then((cache) => cache.addAll(ASSETS_TO_CACHE))\n      .then(() => self.skipWaiting()),\n  );\n});\n\n// Activate event\nself.addEventListener(\"activate\", (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames\n          .filter((name) => name !== CACHE_NAME)\n          .map((name) => caches.delete(name)),\n      );\n    }),\n  );\n});\n\n// Fetch event\nself.addEventListener(\"fetch\", (event) => {\n  // Skip caching for chrome-extension URLs\n  if (event.request.url.startsWith(\"chrome-extension://\")) {\n    return;\n  }\n\n  // Skip non-GET requests\n  if (event.request.method !== \"GET\") {\n    return;\n  }\n\n  // Bypass cache for explicit versioned requests (cache-busting)\n  if (event.request.url.includes(\"?v=\")) {\n    event.respondWith(fetch(event.request));\n    return;\n  }\n\n  // Handle normal requests\n  event.respondWith(\n    caches.match(event.request).then((response) => {\n      if (response) {\n        return response;\n      }\n\n      return fetch(event.request).then((response) => {\n        // Don't cache if:\n        // 1. not successful\n        // 2. not a 'basic' type (i.e., from our origin)\n        // 3. is a chrome-extension URL\n        if (\n          !response ||\n          response.status !== 200 ||\n          response.type !== \"basic\" ||\n          response.url.startsWith(\"chrome-extension://\")\n        ) {\n          return response;\n        }\n\n        try {\n          const responseToCache = response.clone();\n          caches\n            .open(CACHE_NAME)\n            .then((cache) => {\n              if (event.request.url.startsWith(\"http\")) {\n                cache.put(event.request, responseToCache);\n              }\n            })\n            .catch((err) => {\n              console.warn(\"Cache storage failed:\", err);\n            });\n        } catch (err) {\n          console.warn(\"Cache operation failed:\", err);\n        }\n\n        return response;\n      });\n    }),\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/tailwind.config.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":2,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":36,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./index.html\", \"./src/**/*.{js,ts,jsx,tsx}\", \"./styles/**/*.css\"],\n  theme: {\n    extend: {\n      colors: {\n        // Modern Cardiac Brand Colors\n        primary: {\n          50: \"#f0f9ff\",\n          100: \"#e0f2fe\",\n          500: \"#06b6d4\",\n          600: \"#0891b2\",\n          700: \"#0e7490\",\n          900: \"#164e63\",\n        },\n        clinical: {\n          normal: \"#10b981\", // Emerald-500\n          warning: \"#f59e0b\", // Amber-500\n          critical: \"#ef4444\", // Red-500\n          urgent: \"#dc2626\", // Red-600\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"sans-serif\"],\n        mono: [\"JetBrains Mono\", \"Consolas\", \"monospace\"],\n      },\n      spacing: {\n        18: \"4.5rem\",\n        88: \"22rem\",\n      },\n    },\n  },\n  plugins: [],\n  // Purge configuration for production\n  purge: {\n    enabled: process.env.NODE_ENV === \"production\",\n    content: [\n      \"./index.html\",\n      \"./src/**/*.{js,ts,jsx,tsx}\",\n      \"./styles/**/*.css\",\n    ],\n    options: {\n      safelist: [\n        // Keep clinical status classes\n        \"clinical-normal\",\n        \"clinical-warning\",\n        \"clinical-critical\",\n        \"clinical-urgent\",\n        // Keep theme classes\n        \"theme-light\",\n        \"theme-dark\",\n      ],\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/tests/ai-enhancements.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":14,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":26,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":27,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":28,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":29,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":31,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":32,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":34,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":35,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":37,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":38,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":45,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":67,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":68,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":70,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":80,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":80,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":103,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":105,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":105,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":106,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":106,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":116,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":116,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":126,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":126,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":127,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":127,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":138,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":138,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":165,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":165,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":169,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":169,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":177,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":177,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":178,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":178,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":189,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":189,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":190,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":190,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":194,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":194,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":195,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":195,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":201,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":201,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":202,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":202,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":203,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":203,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":220,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":223,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":223,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":227,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":227,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":228,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":228,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":233,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":233,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":234,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":234,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":235,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":235,"endColumn":8}],"suppressedMessages":[],"errorCount":41,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AI Enhancement Integration Tests\n * Tests for enhanced clinical context extraction, diagnosis disambiguation,\n * safety validation, and evidence-based plan generation\n */\n\n/* eslint-env node */\n\nimport { extractClinicalContext, disambiguateDiagnoses } from '../src/parsers/entityExtraction.js';\nimport { validateClinicalSafety, generateEvidenceBasedPlan } from '../src/parsers/clinicalSafety.js';\n\n// Test case 1: Context extraction with temporal, severity, causality, and negations\nfunction testContextExtraction() {\n  console.log('\\n=== Test 1: Clinical Context Extraction ===');\n  \n  const note = `\n    Patient presents with acute chest pain for 3 hours.\n    No fever or chills. Denies nausea or vomiting.\n    Severe dyspnea due to pulmonary edema.\n    Chronic hypertension - stable on current regimen.\n    Worsening heart failure symptoms since last visit.\n  `;\n  \n  const context = extractClinicalContext(note);\n  \n  console.log('Temporal markers:', context.temporal.length);\n  console.log('  - acute chest pain (onset)');\n  console.log('  - chronic hypertension (onset)');\n  console.log('  - worsening heart failure (onset)');\n  \n  console.log('Severity markers:', context.severity.length);\n  console.log('  - severe dyspnea');\n  \n  console.log('Causality:', context.causality.length);\n  console.log('  - pulmonary edema → dyspnea');\n  \n  console.log('Negations:', context.negations.length);\n  console.log('  - fever/chills, nausea, vomiting');\n  \n  return context.temporal.length > 0 && context.negations.length > 0;\n}\n\n// Test case 2: Diagnosis disambiguation\nfunction testDisambiguation() {\n  console.log('\\n=== Test 2: Diagnosis Disambiguation ===');\n  \n  const diagnoses = [\n    'Acute heart failure',\n    'Chronic heart failure',\n    'Atrial fibrillation',\n    'Fever' // Should be removed due to negation\n  ];\n  \n  const context = {\n    temporal: [\n      { entity: 'heart failure', modifier: 'acute', type: 'onset' }\n    ],\n    severity: [],\n    causality: [],\n    negations: ['fever', 'chills']\n  };\n  \n  const vitals = { hr: 110, bp: '140/90' };\n  \n  const disambiguated = disambiguateDiagnoses(diagnoses, context, vitals);\n  \n  console.log('Original diagnoses:', diagnoses.length);\n  console.log('After disambiguation:', disambiguated.length);\n  disambiguated.forEach(d => {\n    console.log(`  - ${d.diagnosis} (confidence: ${d.confidence.toFixed(2)})`);\n  });\n  \n  // Should prioritize acute over chronic and remove negated fever\n  return disambiguated.length < diagnoses.length &&\n         disambiguated[0].diagnosis.includes('Acute');\n}\n\n// Test case 3: Clinical safety validation\nfunction testSafetyValidation() {\n  console.log('\\n=== Test 3: Clinical Safety Validation ===');\n  \n  const parsed = {\n    medications: [\n      'Warfarin 5mg daily',\n      'Metoprolol 50mg BID',\n      'Lisinopril 20mg daily',\n      'Spironolactone 25mg daily'\n    ],\n    labs: {\n      platelets: 45, // Low!\n      creatinine: 2.5, // Elevated!\n      potassium: 5.5, // High!\n      hgb: 9.5\n    },\n    vitals: {\n      hr: 48, // Bradycardia!\n      bp: '140/85'\n    }\n  };\n  \n  const warnings = validateClinicalSafety(parsed);\n  \n  console.log(`Safety warnings detected: ${warnings.length}`);\n  warnings.forEach(w => {\n    console.log(`  [${w.severity}] ${w.message}`);\n    console.log(`    → ${w.action}`);\n  });\n  \n  // Should detect: anticoag+bleeding, renal dosing, hyperkalemia, bradycardia\n  return warnings.length >= 3 && \n         warnings.some(w => w.severity === 'HIGH');\n}\n\n// Test case 4: Evidence-based plan generation\nfunction testEvidenceBasedPlan() {\n  console.log('\\n=== Test 4: Evidence-Based Plan Generation ===');\n  \n  const parsed = {\n    diagnoses: ['Acute STEMI', 'Atrial fibrillation'],\n    pmh: 'No active bleeding',\n    medications: []\n  };\n  \n  const plan = generateEvidenceBasedPlan(parsed);\n  \n  console.log('Generated plan:');\n  console.log(plan);\n  \n  // Should include STEMI and AFib management with ACC/AHA references\n  return plan && \n         plan.includes('cath lab') && \n         plan.includes('Aspirin') &&\n         plan.includes('Class I');\n}\n\n// Test case 5: Integration test with full workflow\nfunction testFullWorkflow() {\n  console.log('\\n=== Test 5: Full AI Enhancement Workflow ===');\n  \n  const clinicalNote = `\n    72 yo M with PMH of CAD s/p PCI 2015, HTN, CKD Stage 3 presents with chest pain x 3 hours.\n    \n    Vitals: BP 165/92, HR 110, RR 22, O2 sat 94% RA\n    \n    Medications:\n    - Aspirin 81mg daily\n    - Metoprolol 50mg BID\n    - Lisinopril 20mg daily\n    - Warfarin 5mg daily\n    \n    Labs:\n    Troponin: 1.2 (elevated)\n    BNP: 850\n    Creatinine: 2.8\n    Potassium: 5.8\n    Platelets: 48,000\n    \n    EKG: ST elevation 2mm in II, III, aVF\n    \n    Assessment: Acute inferior STEMI with acute kidney injury\n    \n    No denies dyspnea. No chest pain at rest.\n  `;\n  \n  console.log('Processing clinical note...');\n  \n  // Step 1: Extract context\n  const context = extractClinicalContext(clinicalNote);\n  console.log(`✓ Context extracted: ${context.temporal.length} temporal, ${context.negations.length} negations`);\n  \n  // Step 2: Extract diagnoses (simulated)\n  const diagnoses = ['Acute inferior STEMI', 'Acute kidney injury', 'CKD Stage 3', 'Dyspnea'];\n  \n  // Step 3: Disambiguate\n  const vitals = { hr: 110, bp: '165/92' };\n  const disambiguated = disambiguateDiagnoses(diagnoses, context, vitals);\n  console.log(`✓ Diagnoses disambiguated: ${diagnoses.length} → ${disambiguated.length}`);\n  console.log(`  Top diagnosis: ${disambiguated[0].diagnosis}`);\n  \n  // Step 4: Safety validation\n  const parsed = {\n    medications: ['Aspirin 81mg', 'Metoprolol 50mg', 'Lisinopril 20mg', 'Warfarin 5mg'],\n    labs: { troponin: 1.2, creatinine: 2.8, potassium: 5.8, platelets: 48 },\n    vitals,\n    diagnoses: disambiguated.map(d => d.diagnosis)\n  };\n  \n  const warnings = validateClinicalSafety(parsed);\n  console.log(`✓ Safety checks: ${warnings.length} warnings`);\n  warnings.forEach(w => console.log(`  [${w.severity}] ${w.message.substring(0, 60)}...`));\n  \n  // Step 5: Generate evidence-based plan\n  const plan = generateEvidenceBasedPlan(parsed);\n  console.log('✓ Evidence-based plan generated');\n  console.log(plan ? plan.substring(0, 200) + '...' : 'No plan generated');\n  \n  return disambiguated.length > 0 && warnings.length > 0 && plan !== null;\n}\n\n// Run all tests\nconsole.log('╔═══════════════════════════════════════════════════════════╗');\nconsole.log('║   AI Enhancement Integration Tests                        ║');\nconsole.log('╚═══════════════════════════════════════════════════════════╝');\n\nconst tests = [\n  { name: 'Context Extraction', fn: testContextExtraction },\n  { name: 'Diagnosis Disambiguation', fn: testDisambiguation },\n  { name: 'Clinical Safety Validation', fn: testSafetyValidation },\n  { name: 'Evidence-Based Plan Generation', fn: testEvidenceBasedPlan },\n  { name: 'Full Workflow Integration', fn: testFullWorkflow }\n];\n\nlet passed = 0;\nlet failed = 0;\n\ntests.forEach(test => {\n  try {\n    const result = test.fn();\n    if (result) {\n      console.log(`\\n✅ ${test.name}: PASSED`);\n      passed++;\n    } else {\n      console.log(`\\n❌ ${test.name}: FAILED`);\n      failed++;\n    }\n  } catch (error) {\n    console.log(`\\n❌ ${test.name}: ERROR`);\n    console.error(error.message);\n    failed++;\n  }\n});\n\nconsole.log('\\n╔═══════════════════════════════════════════════════════════╗');\nconsole.log(`║   Results: ${passed} passed, ${failed} failed                          ║`);\nconsole.log('╚═══════════════════════════════════════════════════════════╝');\n\nexport { testContextExtraction, testDisambiguation, testSafetyValidation, testEvidenceBasedPlan, testFullWorkflow };\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/tests/parser-pipeline.unit.spec.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":70,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":73,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":74,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":80,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":80,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":81,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":81,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":87,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":87,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":123,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":123,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":216,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":216,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":362,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":362,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":470,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":470,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":471,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":471,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":474,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":474,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":476,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":476,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":477,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":477,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":479,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":479,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":481,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":481,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":482,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":482,"endColumn":10}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Parser Pipeline Unit Tests\n * Tests: normalize → detectSections → extractEntities → mapToTemplate\n *\n * Tests should NOT change code unless they fail first!\n */\n\nimport { normalize } from \"../src/parsers/normalize.js\";\nimport { parseNote } from \"../src/parsers/smartParser.js\";\nimport {\n  extractVitals,\n  extractMeds,\n  extractAllergies,\n  extractDiagnoses,\n  extractDemographics,\n} from \"../src/parsers/entityExtraction.js\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Test helpers\nfunction loadFixture(filename) {\n  const fixturePath = path.join(__dirname, \"fixtures\", \"unit\", filename);\n  return fs.readFileSync(fixturePath, \"utf-8\");\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(`Assertion failed: ${message}`);\n  }\n}\n\nfunction assertEqual(actual, expected, label) {\n  if (actual !== expected) {\n    throw new Error(`${label}: Expected ${expected}, got ${actual}`);\n  }\n}\n\nfunction assertIncludes(haystack, needle, label) {\n  if (!haystack || !haystack.includes(needle)) {\n    throw new Error(\n      `${label}: Expected to include \"${needle}\", got \"${haystack}\"`,\n    );\n  }\n}\n\nfunction assertExists(value, label) {\n  if (value === null || value === undefined) {\n    throw new Error(`${label}: Expected value to exist, got ${value}`);\n  }\n}\n\nfunction assertGreaterThan(actual, threshold, label) {\n  if (actual <= threshold) {\n    throw new Error(`${label}: Expected ${actual} > ${threshold}`);\n  }\n}\n\n// Test runner\nlet passed = 0;\nlet failed = 0;\nconst failures = [];\n\nfunction test(name, fn) {\n  try {\n    fn();\n    console.log(`✅ ${name}`);\n    passed++;\n  } catch (error) {\n    console.log(`❌ ${name}`);\n    console.log(`   ${error.message}`);\n    failed++;\n    failures.push({ name, error: error.message });\n  }\n}\n\nconsole.log(\"🧪 Parser Pipeline Unit Tests\\n\");\nconsole.log(\"═══════════════════════════════════════════════════════════\\n\");\n\n// ============================================================\n// NORMALIZE TESTS\n// ============================================================\n\nconsole.log(\"📝 Testing normalize()...\\n\");\n\ntest(\"normalize: removes extra whitespace\", () => {\n  const input = \"Line  with    extra     spaces\";\n  const result = normalize(input);\n  assert(!result.includes(\"    \"), \"Should not have 4+ spaces\");\n  assert(!result.includes(\"   \"), \"Should not have 3+ spaces\");\n});\n\ntest(\"normalize: preserves line breaks\", () => {\n  const input = \"Line 1\\nLine 2\\nLine 3\";\n  const result = normalize(input);\n  assertEqual(result.split(\"\\n\").length, 3, \"Should have 3 lines\");\n});\n\ntest(\"normalize: handles control characters\", () => {\n  const input = \"Text\\x00with\\x01control\\x02chars\";\n  const result = normalize(input);\n  // normalize() may or may not strip control chars - just ensure it doesn't crash\n  assertExists(result, \"Should return a string\");\n});\n\ntest(\"normalize: handles empty input\", () => {\n  const result = normalize(\"\");\n  assertEqual(result, \"\", \"Should return empty string\");\n});\n\ntest(\"normalize: handles whitespace-only input\", () => {\n  const result = normalize(\"   \\n  \\t  \\n   \");\n  assert(result.trim().length === 0, \"Should normalize to empty/whitespace\");\n});\n\n// ============================================================\n// DETECT SECTIONS TESTS (via parseNote)\n// ============================================================\n\nconsole.log(\"\\n📋 Testing detectSections()...\\n\");\n\ntest(\"detectSections: clean H&P with standard headers\", () => {\n  const text = loadFixture(\"clean-hp.txt\");\n  const result = parseNote(text);\n\n  assertExists(result.data.subjective, \"Should extract subjective\");\n  assertExists(result.data.objective, \"Should extract objective\");\n  assertExists(result.data.assessment, \"Should extract assessment\");\n  assertExists(result.data.plan, \"Should extract plan\");\n\n  assertIncludes(\n    result.data.subjective.toLowerCase(),\n    \"chest pain\",\n    \"Subjective content\",\n  );\n  assertIncludes(\n    result.data.assessment.toLowerCase(),\n    \"acute coronary syndrome\",\n    \"Assessment content\",\n  );\n  assertIncludes(result.data.plan.toLowerCase(), \"aspirin\", \"Plan content\");\n});\n\ntest(\"detectSections: messy headings with abbreviations\", () => {\n  const text = loadFixture(\"messy-headings.txt\");\n  const result = parseNote(text);\n\n  // Should still detect sections despite messy headers\n  assertExists(\n    result.data.subjective,\n    'Should extract subjective from \"hx/PE\"',\n  );\n  assertExists(result.data.assessment, 'Should extract assessment from \"Imp\"');\n  assertExists(result.data.plan, 'Should extract plan from \"tx plan\"');\n\n  assertIncludes(\n    result.data.subjective.toLowerCase(),\n    \"cp\",\n    \"Should have chief complaint\",\n  );\n});\n\ntest(\"detectSections: missing plan section\", () => {\n  const text = loadFixture(\"missing-plan.txt\");\n  const result = parseNote(text);\n\n  assertExists(result.data.subjective, \"Should extract subjective\");\n  assertExists(result.data.objective, \"Should extract objective\");\n  assertExists(result.data.assessment, \"Should extract assessment\");\n\n  // Parser should still extract or infer plan, even if not explicit\n  // No strict requirement for warning - parser may auto-generate plan\n  assert(true, \"Parser handles missing sections gracefully\");\n});\n\ntest(\"detectSections: alternate synonyms (ROS, Background, Diagnosis)\", () => {\n  const text = loadFixture(\"alternate-synonyms.txt\");\n  const result = parseNote(text);\n\n  // ROS should be detected (may be in subjective or separate section)\n  // Just verify sections were detected\n  assert(\n    Object.keys(result.raw.sections).length >= 5,\n    \"Should detect multiple sections\",\n  );\n\n  // Diagnosis should map to assessment\n  assertExists(result.data.assessment, \"Should extract from Diagnosis\");\n  assertIncludes(\n    result.data.assessment.toLowerCase(),\n    \"heart failure\",\n    \"Diagnosis content\",\n  );\n});\n\ntest(\"detectSections: inline narrative without headers\", () => {\n  const text = loadFixture(\"inline-vitals.txt\");\n  const result = parseNote(text);\n\n  // Should use heuristics to detect sections\n  assertExists(result.data.subjective, \"Should infer subjective section\");\n  assertExists(\n    result.data.assessment,\n    'Should infer assessment from \"Impression\"',\n  );\n  assertExists(result.data.plan, \"Should infer plan\");\n});\n\n// ============================================================\n// EXTRACT ENTITIES TESTS\n// ============================================================\n\nconsole.log(\"\\n🔍 Testing extractEntities()...\\n\");\n\n// Demographics Tests\ntest(\"extractDemographics: age extraction\", () => {\n  const demos1 = extractDemographics(\"72 year old male\");\n  assertEqual(demos1.age, 72, 'Age from \"72 year old\"');\n\n  const demos2 = extractDemographics(\"58 yo F\");\n  assertEqual(demos2.age, 58, 'Age from \"58 yo\"');\n\n  const demos3 = extractDemographics(\"Patient is 45 years old\");\n  assertEqual(demos3.age, 45, 'Age from \"45 years old\"');\n});\n\ntest(\"extractDemographics: gender extraction\", () => {\n  const demos1 = extractDemographics(\"72 year old male\");\n  assertEqual(demos1.gender, \"male\", 'Gender from \"male\"');\n\n  const demos2 = extractDemographics(\"58 yo F\");\n  assertEqual(demos2.gender, \"female\", 'Gender from \"F\"');\n});\n\n// Vitals Tests\ntest(\"extractVitals: standard format with labels\", () => {\n  const text = \"BP: 145/92, HR: 88, RR: 18, Temp: 98.6, SpO2: 96%\";\n  const vitals = extractVitals(text);\n\n  assertEqual(vitals.bp, \"145/92\", \"Blood pressure\");\n  assertEqual(vitals.hr, 88, \"Heart rate\");\n  assertEqual(vitals.rr, 18, \"Respiratory rate\");\n  assertEqual(vitals.temp, 98.6, \"Temperature\");\n  assertEqual(vitals.spo2, 96, \"SpO2\");\n});\n\ntest(\"extractVitals: inline narrative format\", () => {\n  const text =\n    \"Blood pressure today is 128/82, heart rate of 110 bpm, breathing at 18 breaths per minute, temperature is normal at 98.6F, oxygen saturation 98%\";\n  const vitals = extractVitals(text);\n\n  assertEqual(vitals.bp, \"128/82\", \"Inline BP\");\n  assertEqual(vitals.hr, 110, \"Inline HR\");\n  assertEqual(vitals.rr, 18, \"Inline RR\");\n  assertEqual(vitals.temp, 98.6, \"Inline temp\");\n  assertEqual(vitals.spo2, 98, \"Inline SpO2\");\n});\n\ntest(\"extractVitals: abbreviated format\", () => {\n  const text = \"BP 138/85 P 92 R 16 T 98.2 O2 sat 94%\";\n  const vitals = extractVitals(text);\n\n  assertEqual(vitals.bp, \"138/85\", \"Abbreviated BP\");\n  assertEqual(vitals.hr, 92, \"Abbreviated P\");\n  assertEqual(vitals.rr, 16, \"Abbreviated R\");\n  assertEqual(vitals.temp, 98.2, \"Abbreviated T\");\n  assertEqual(vitals.spo2, 94, \"Abbreviated O2 sat\");\n});\n\n// Medications Tests\ntest(\"extractMeds: listed format\", () => {\n  const text =\n    \"MEDICATIONS:\\n- Aspirin 81mg daily\\n- Metoprolol 50mg BID\\n- Atorvastatin 40mg daily\";\n  const meds = extractMeds(text);\n\n  assertGreaterThan(meds.length, 0, \"Should extract medications\");\n  assert(\n    meds.some((m) => m.toLowerCase().includes(\"aspirin\")),\n    \"Should include Aspirin\",\n  );\n  assert(\n    meds.some((m) => m.toLowerCase().includes(\"metoprolol\")),\n    \"Should include Metoprolol\",\n  );\n});\n\ntest(\"extractMeds: abbreviated format\", () => {\n  const text = \"ASA 81, lisinopril 10, atorva 20mg\";\n  const meds = extractMeds(text);\n\n  assertGreaterThan(meds.length, 0, \"Should extract abbreviated meds\");\n});\n\n// Allergies Tests\ntest(\"extractAllergies: standard format\", () => {\n  const text = \"ALLERGIES:\\nPenicillin - rash\";\n  const allergies = extractAllergies(text);\n\n  // Should extract at least one allergy\n  assertGreaterThan(allergies.length, 0, \"Should extract allergies\");\n  // Allergy name should be extracted (with or without reaction details)\n  assert(allergies[0].length > 0, \"Should have allergy name\");\n});\n\ntest(\"extractAllergies: NKDA\", () => {\n  const text = \"ALLERGIES: NKDA\";\n  const allergies = extractAllergies(text);\n\n  assertEqual(allergies.length, 1, \"Should have one entry\");\n  assertEqual(allergies[0], \"NKDA\", \"Should be NKDA\");\n});\n\ntest('extractAllergies: alternate format \"none\"', () => {\n  const text = \"Drug sensitivities: none\";\n  const allergies = extractAllergies(text);\n\n  assert(\n    allergies.length === 1 && allergies[0] === \"NKDA\",\n    \"Should normalize to NKDA\",\n  );\n});\n\n// Diagnoses Tests\ntest(\"extractDiagnoses: numbered list\", () => {\n  const text =\n    \"1. Acute coronary syndrome\\n2. Hypertension, controlled\\n3. Diabetes mellitus, type 2\";\n  const diagnoses = extractDiagnoses(text);\n\n  assertGreaterThan(diagnoses.length, 0, \"Should extract diagnoses\");\n  assert(\n    diagnoses.some((d) => d.toLowerCase().includes(\"acute coronary\")),\n    \"Should include ACS\",\n  );\n  assert(\n    diagnoses.some((d) => d.toLowerCase().includes(\"hypertension\")),\n    \"Should include HTN\",\n  );\n});\n\ntest(\"extractDiagnoses: bullet format\", () => {\n  const text = \"• Acute MI\\n• CHF exacerbation\\n• CKD stage 3\";\n  const diagnoses = extractDiagnoses(text);\n\n  assertGreaterThan(diagnoses.length, 0, \"Should extract bullet diagnoses\");\n});\n\ntest(\"extractDiagnoses: keyword extraction fallback\", () => {\n  const text = \"Patient has heart failure and hypertension\";\n  const diagnoses = extractDiagnoses(text);\n\n  // Should extract at least one diagnosis via keywords\n  assertGreaterThan(diagnoses.length, 0, \"Should extract via keywords\");\n});\n\n// ============================================================\n// INTEGRATION TESTS (Full Pipeline)\n// ============================================================\n\nconsole.log(\"\\n🔄 Testing Full Pipeline Integration...\\n\");\n\ntest(\"Pipeline: clean H&P end-to-end\", () => {\n  const text = loadFixture(\"clean-hp.txt\");\n  const result = parseNote(text);\n\n  // Check all sections detected\n  assertExists(result.data.subjective, \"Has subjective\");\n  assertExists(result.data.objective, \"Has objective\");\n  assertExists(result.data.assessment, \"Has assessment\");\n  assertExists(result.data.plan, \"Has plan\");\n\n  // Check entities extracted\n  assertExists(result.data.vitals, \"Has vitals\");\n  assertExists(result.data.patient, \"Has patient demographics\");\n  assertExists(result.data.meds, \"Has medications\");\n  assertExists(result.data.allergies, \"Has allergies\");\n  assertExists(result.data.diagnoses, \"Has diagnoses\");\n\n  // Check patient data\n  assertEqual(result.data.patient.age, 72, \"Patient age\");\n  assertEqual(result.data.patient.gender, \"male\", \"Patient gender\");\n\n  // Check vitals\n  assertEqual(result.data.vitals.bp, \"145/92\", \"BP extracted\");\n  assertEqual(result.data.vitals.hr, 88, \"HR extracted\");\n\n  // Check confidence\n  assertGreaterThan(result.confidence, 0.5, \"Confidence score\");\n});\n\ntest(\"Pipeline: messy headings still parses correctly\", () => {\n  const text = loadFixture(\"messy-headings.txt\");\n  const result = parseNote(text);\n\n  // Should handle abbreviations and messy format\n  assertExists(result.data.subjective, \"Parsed subjective\");\n  assertExists(result.data.assessment, \"Parsed assessment\");\n  assertExists(result.data.vitals, \"Extracted vitals\");\n\n  assertEqual(result.data.vitals.bp, \"138/85\", \"BP from messy format\");\n  assertEqual(result.data.patient.age, 58, \"Age from abbreviation\");\n});\n\ntest(\"Pipeline: missing plan handled gracefully\", () => {\n  const text = loadFixture(\"missing-plan.txt\");\n  const result = parseNote(text);\n\n  // Should have sections except plan\n  assertExists(result.data.subjective, \"Has subjective\");\n  assertExists(result.data.assessment, \"Has assessment\");\n\n  // Parser handles missing plan gracefully (may auto-generate or leave empty)\n  assert(true, \"Parser handles missing sections gracefully\");\n});\n\ntest(\"Pipeline: inline vitals extracted correctly\", () => {\n  const text = loadFixture(\"inline-vitals.txt\");\n  const result = parseNote(text);\n\n  // Should extract vitals from narrative\n  assertExists(result.data.vitals, \"Has vitals\");\n  assertEqual(result.data.vitals.bp, \"128/82\", \"Inline BP\");\n  assertEqual(result.data.vitals.hr, 110, \"Inline HR\");\n\n  // Should still parse overall structure\n  assertExists(result.data.patient, \"Has patient\");\n  assertEqual(result.data.patient.age, 45, \"Patient age from narrative\");\n});\n\ntest(\"Pipeline: alternate synonyms recognized\", () => {\n  const text = loadFixture(\"alternate-synonyms.txt\");\n  const result = parseNote(text);\n\n  // ROS, Background, Diagnosis should all map correctly\n  assertExists(result.data.subjective, \"ROS mapped to subjective\");\n  assertExists(result.data.assessment, \"Diagnosis mapped to assessment\");\n  assertExists(result.data.plan, \"Management mapped to plan\");\n\n  // Check demographics\n  assertEqual(result.data.patient.age, 80, \"Age from alternate format\");\n\n  // Check vitals\n  assertExists(result.data.vitals.bp, \"Vitals extracted\");\n});\n\ntest(\"Pipeline: confidence scoring\", () => {\n  const cleanText = loadFixture(\"clean-hp.txt\");\n  const messyText = loadFixture(\"messy-headings.txt\");\n\n  const cleanResult = parseNote(cleanText);\n  const messyResult = parseNote(messyText);\n\n  // Clean note should have high confidence\n  assertGreaterThan(cleanResult.confidence, 0.6, \"Clean note confidence\");\n\n  // Messy note should have lower confidence than clean\n  assertGreaterThan(messyResult.confidence, 0.3, \"Messy note confidence\");\n  assert(\n    messyResult.confidence < cleanResult.confidence,\n    \"Messy < Clean confidence\",\n  );\n});\n\n// ============================================================\n// RESULTS\n// ============================================================\n\nconsole.log(\"\\n═══════════════════════════════════════════════════════════\");\nconsole.log(`\\n📊 Test Results: ${passed} passed, ${failed} failed`);\n\nif (failed > 0) {\n  console.log(\"\\n❌ Failed tests:\");\n  failures.forEach((f) => {\n    console.log(`   • ${f.name}`);\n    console.log(`     ${f.error}`);\n  });\n  process.exit(1);\n} else {\n  console.log(\"\\n✅ All tests passed!\");\n  process.exit(0);\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/tests/parsing.real-notes.spec.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":20,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":52,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":55,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":58,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":58,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":67,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":70,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":71,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":71,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":74,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":239,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":239,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":273,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":273,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":277,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":277,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":280,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":280,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":284,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":284,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":288,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":288,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":293,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":293,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":298,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":298,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":303,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":303,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":317,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":317,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":318,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":318,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":333,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":333,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":338,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":338,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":345,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":345,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":346,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":346,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":347,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":347,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":348,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":348,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":354,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":354,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":356,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":356,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":357,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":357,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":359,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":359,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":361,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":361,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":369,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":369,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":375,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":375,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":377,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":377,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":378,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":378,"endColumn":12}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real Clinical Notes Test Suite\n * Tests parser against actual de-identified clinical notes\n *\n * Usage:\n *   npm run test:real-notes                    # Run all real note tests\n *   npm run test:real-notes -- --file=note-001 # Test single note\n *   npm run test:real-notes -- --verbose       # Show detailed diff\n */\n\nimport { parseNote } from \"../src/parsers/smartParser.js\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Parse command line args\nconst args = process.argv.slice(2);\nconst singleFile = args.find((a) => a.startsWith(\"--file=\"))?.split(\"=\")[1];\nconst verbose = args.includes(\"--verbose\");\nconst statsOnly = args.includes(\"--stats\");\n\n// Test results tracking\nlet passed = 0;\nlet failed = 0;\nconst failures = [];\n\n// ANSI color codes\nconst colors = {\n  reset: \"\\x1b[0m\",\n  bright: \"\\x1b[1m\",\n  red: \"\\x1b[31m\",\n  green: \"\\x1b[32m\",\n  yellow: \"\\x1b[33m\",\n  blue: \"\\x1b[34m\",\n  cyan: \"\\x1b[36m\",\n};\n\nfunction colorize(color, text) {\n  return `${colors[color]}${text}${colors.reset}`;\n}\n\n/**\n * Load all fixture files from tests/fixtures/real/\n */\nfunction loadRealFixtures() {\n  const fixturesDir = path.join(__dirname, \"fixtures\", \"real\");\n\n  if (!fs.existsSync(fixturesDir)) {\n    console.error(\n      colorize(\"red\", `❌ Fixtures directory not found: ${fixturesDir}`),\n    );\n    console.log(\n      colorize(\"yellow\", \"\\nCreate it with: mkdir tests/fixtures/real\"),\n    );\n    process.exit(1);\n  }\n\n  const files = fs\n    .readdirSync(fixturesDir)\n    .filter((f) => f.endsWith(\".json\") && f !== \"TEMPLATE.json\")\n    .filter((f) => !singleFile || f.includes(singleFile));\n\n  if (files.length === 0) {\n    console.error(\n      colorize(\"yellow\", \"⚠️  No fixture files found in tests/fixtures/real/\"),\n    );\n    console.log(colorize(\"cyan\", \"\\nAdd fixtures by copying TEMPLATE.json:\"));\n    console.log(\n      \"  cp tests/fixtures/real/TEMPLATE.json tests/fixtures/real/note-001.json\",\n    );\n    process.exit(0);\n  }\n\n  return files.map((filename) => {\n    const filepath = path.join(fixturesDir, filename);\n    const content = fs.readFileSync(filepath, \"utf-8\");\n    return JSON.parse(content);\n  });\n}\n\n/**\n * Deep equality check with detailed diff\n */\nfunction deepEqual(actual, expected, path = \"\") {\n  const diffs = [];\n\n  // Handle null/undefined\n  if (actual === expected) return { equal: true, diffs: [] };\n  if (actual == null || expected == null) {\n    diffs.push({ path, expected, actual, type: \"null-mismatch\" });\n    return { equal: false, diffs };\n  }\n\n  // Handle arrays\n  if (Array.isArray(expected)) {\n    if (!Array.isArray(actual)) {\n      diffs.push({ path, expected, actual, type: \"type-mismatch\" });\n      return { equal: false, diffs };\n    }\n\n    // Check if all expected items are present (allows extra items)\n    for (const item of expected) {\n      if (!actual.includes(item)) {\n        diffs.push({\n          path,\n          expected: item,\n          actual: actual,\n          type: \"missing-array-item\",\n        });\n      }\n    }\n\n    return { equal: diffs.length === 0, diffs };\n  }\n\n  // Handle objects\n  if (typeof expected === \"object\" && typeof actual === \"object\") {\n    for (const key of Object.keys(expected)) {\n      const newPath = path ? `${path}.${key}` : key;\n      const result = deepEqual(actual[key], expected[key], newPath);\n      diffs.push(...result.diffs);\n    }\n    return { equal: diffs.length === 0, diffs };\n  }\n\n  // Handle primitives\n  if (actual !== expected) {\n    diffs.push({ path, expected, actual, type: \"value-mismatch\" });\n    return { equal: false, diffs };\n  }\n\n  return { equal: true, diffs: [] };\n}\n\n/**\n * Format diff output for console\n */\nfunction formatDiff(diffs) {\n  if (diffs.length === 0) return \"\";\n\n  let output = \"\\n  \" + colorize(\"yellow\", \"DIFF:\");\n\n  for (const diff of diffs) {\n    output += `\\n  ${colorize(\"cyan\", diff.path)}:`;\n\n    switch (diff.type) {\n      case \"missing-array-item\":\n        output += `\\n    ${colorize(\"red\", \"- expected:\")} \"${diff.expected}\"`;\n        output += `\\n    ${colorize(\"green\", \"+ actual:\")} ${JSON.stringify(diff.actual)}`;\n        break;\n\n      case \"value-mismatch\":\n        output += `\\n    ${colorize(\"red\", \"- expected:\")} ${JSON.stringify(diff.expected)}`;\n        output += `\\n    ${colorize(\"green\", \"+ actual:\")} ${JSON.stringify(diff.actual)}`;\n        break;\n\n      case \"type-mismatch\":\n        output += `\\n    ${colorize(\"red\", \"- expected type:\")} ${typeof diff.expected}`;\n        output += `\\n    ${colorize(\"green\", \"+ actual type:\")} ${typeof diff.actual}`;\n        break;\n\n      case \"null-mismatch\":\n        output += `\\n    ${colorize(\"red\", \"- expected:\")} ${diff.expected}`;\n        output += `\\n    ${colorize(\"green\", \"+ actual:\")} ${diff.actual}`;\n        break;\n    }\n  }\n\n  return output;\n}\n\n/**\n * Check \"mustHave\" assertions\n */\nfunction checkMustHave(data, mustHave) {\n  const errors = [];\n\n  for (const [path, expectedValue] of Object.entries(mustHave)) {\n    const actualValue = getNestedValue(data, path);\n\n    if (Array.isArray(expectedValue)) {\n      // Check if all expected items are present\n      for (const item of expectedValue) {\n        if (!actualValue?.includes(item)) {\n          errors.push(`Missing required value \"${item}\" in ${path}`);\n        }\n      }\n    } else if (actualValue !== expectedValue) {\n      errors.push(\n        `Expected ${path} to be ${JSON.stringify(expectedValue)}, got ${JSON.stringify(actualValue)}`,\n      );\n    }\n  }\n\n  return errors;\n}\n\n/**\n * Check \"shouldNotHave\" assertions\n */\nfunction checkShouldNotHave(data, shouldNotHave) {\n  const errors = [];\n\n  for (const [path, forbiddenValues] of Object.entries(shouldNotHave)) {\n    const actualValue = getNestedValue(data, path);\n\n    if (Array.isArray(forbiddenValues)) {\n      for (const item of forbiddenValues) {\n        if (actualValue?.includes(item)) {\n          errors.push(`Found forbidden value \"${item}\" in ${path}`);\n        }\n      }\n    } else if (actualValue === forbiddenValues) {\n      errors.push(\n        `Found forbidden value ${JSON.stringify(forbiddenValues)} in ${path}`,\n      );\n    }\n  }\n\n  return errors;\n}\n\n/**\n * Get nested object value by path string (e.g., \"vitals.bp\")\n */\nfunction getNestedValue(obj, path) {\n  return path.split(\".\").reduce((current, key) => current?.[key], obj);\n}\n\n/**\n * Run test for a single fixture\n */\nfunction testFixture(fixture) {\n  // Skip if requested\n  if (fixture.skip) {\n    console.log(\n      colorize(\n        \"yellow\",\n        `⏭️  ${fixture.id}: ${fixture.description} (skipped: ${fixture.skipReason || \"no reason given\"})`,\n      ),\n    );\n    return;\n  }\n\n  try {\n    // Parse the note\n    const result = parseNote(fixture.input);\n    const { data, confidence, warnings } = result;\n\n    // Track errors\n    const errors = [];\n\n    // Check mustHave assertions\n    if (fixture.mustHave) {\n      errors.push(...checkMustHave(data, fixture.mustHave));\n    }\n\n    // Check shouldNotHave assertions\n    if (fixture.shouldNotHave) {\n      errors.push(...checkShouldNotHave(data, fixture.shouldNotHave));\n    }\n\n    // Check expected output (deep comparison)\n    const { equal, diffs } = deepEqual(data, fixture.expected);\n\n    // Determine if test passed\n    const testPassed = errors.length === 0 && equal;\n\n    if (testPassed) {\n      console.log(\n        colorize(\"green\", `✅ ${fixture.id}: ${fixture.description}`),\n      );\n      if (verbose) {\n        console.log(\n          colorize(\"cyan\", `   Confidence: ${confidence.toFixed(2)}`),\n        );\n        console.log(colorize(\"cyan\", `   Warnings: ${warnings.length}`));\n      }\n      passed++;\n    } else {\n      console.log(colorize(\"red\", `❌ ${fixture.id}: ${fixture.description}`));\n\n      // Show errors\n      for (const error of errors) {\n        console.log(colorize(\"red\", `   ${error}`));\n      }\n\n      // Show diff\n      if (verbose && diffs.length > 0) {\n        console.log(formatDiff(diffs));\n      }\n\n      // Show warnings\n      if (warnings.length > 0) {\n        console.log(\n          colorize(\"yellow\", `   Parser warnings: ${warnings.join(\", \")}`),\n        );\n      }\n\n      console.log(\n        colorize(\"cyan\", `   Confidence: ${confidence.toFixed(2)}\\n`),\n      );\n\n      failed++;\n      failures.push({\n        id: fixture.id,\n        description: fixture.description,\n        errors,\n        diffs,\n        confidence,\n      });\n    }\n  } catch (error) {\n    console.log(colorize(\"red\", `❌ ${fixture.id}: ${fixture.description}`));\n    console.log(colorize(\"red\", `   Error: ${error.message}\\n`));\n    failed++;\n    failures.push({\n      id: fixture.id,\n      description: fixture.description,\n      errors: [error.message],\n      diffs: [],\n    });\n  }\n}\n\n/**\n * Main test runner\n */\nfunction runTests() {\n  console.log(\n    colorize(\"bright\", \"🧪 Running Real Clinical Notes Parser Tests\\n\"),\n  );\n\n  const fixtures = loadRealFixtures();\n  console.log(colorize(\"cyan\", `Found ${fixtures.length} fixture(s)\\n`));\n\n  for (const fixture of fixtures) {\n    testFixture(fixture);\n  }\n\n  // Summary\n  console.log(\"\\n\" + colorize(\"bright\", \"📊 Test Results:\"));\n  console.log(`   ${colorize(\"green\", `✅ Passed: ${passed}`)}`);\n  console.log(`   ${colorize(\"red\", `❌ Failed: ${failed}`)}`);\n  console.log(\n    `   ${colorize(\"cyan\", `📈 Success Rate: ${((passed / (passed + failed)) * 100).toFixed(1)}%`)}`,\n  );\n\n  // Detailed failure summary\n  if (failures.length > 0 && !statsOnly) {\n    console.log(\"\\n\" + colorize(\"yellow\", \"🔍 Failed Tests Summary:\"));\n    for (const failure of failures) {\n      console.log(`\\n  ${colorize(\"red\", failure.id)}: ${failure.description}`);\n      console.log(`    Confidence: ${failure.confidence.toFixed(2)}`);\n      if (failure.errors.length > 0) {\n        console.log(`    Errors:`);\n        for (const error of failure.errors) {\n          console.log(`      - ${error}`);\n        }\n      }\n    }\n  }\n\n  // Exit code\n  if (failed > 0) {\n    console.log(\n      colorize(\n        \"red\",\n        \"\\n❌ Some tests failed. Fix parser or update expected output.\",\n      ),\n    );\n    process.exit(1);\n  } else {\n    console.log(colorize(\"green\", \"\\n✅ All tests passed!\"));\n    process.exit(0);\n  }\n}\n\n// Run tests\nrunTests();\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/tests/parsing.smart.spec.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":43,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":51,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":51,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":54,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":55,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":270,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":270,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":273,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":273,"endColumn":10}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Smart Parser Test Suite\n * Tests fault-tolerant parsing with 10 fixtures covering edge cases\n */\n\nimport { parseNote, fallbackParse } from \"../src/parsers/smartParser.js\";\nimport { normalize } from \"../src/parsers/normalize.js\";\nimport { extractVitals, extractMeds } from \"../src/parsers/entityExtraction.js\";\nimport { scoreMatch } from \"../src/parsers/synonyms.js\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Helper to load fixture\nfunction loadFixture(filename) {\n  const fixturePath = path.join(__dirname, \"fixtures\", filename);\n  return fs.readFileSync(fixturePath, \"utf-8\");\n}\n\n// Test helper\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(`Assertion failed: ${message}`);\n  }\n}\n\nfunction assertGreater(actual, expected, label) {\n  if (actual <= expected) {\n    throw new Error(`Expected ${label} (${actual}) to be > ${expected}`);\n  }\n}\n\nfunction assertIncludes(haystack, needle, label) {\n  if (!haystack || !haystack.includes(needle)) {\n    throw new Error(`Expected ${label} to include \"${needle}\"`);\n  }\n}\n\n// Test Suite\nconsole.log(\"🧪 Running Smart Parser Tests\\n\");\n\nlet passed = 0;\nlet failed = 0;\n\nfunction test(name, fn) {\n  try {\n    fn();\n    console.log(`✅ ${name}`);\n    passed++;\n  } catch (error) {\n    console.log(`❌ ${name}`);\n    console.log(`   ${error.message}\\n`);\n    failed++;\n  }\n}\n\n// === FIXTURE TESTS ===\n\ntest(\"01: Clean structured note\", () => {\n  const text = loadFixture(\"01-clean-structured.txt\");\n  const result = parseNote(text);\n\n  assertGreater(result.confidence, 0.7, \"confidence\");\n  assert(result.data.subjective, \"has subjective\");\n  assert(result.data.objective, \"has objective\");\n  assert(result.data.assessment, \"has assessment\");\n  assert(result.data.plan, \"has plan\");\n  assertGreater(Object.keys(result.data.vitals).length, 3, \"vitals count\");\n  assertIncludes(result.data.assessment, \"NSTEMI\", \"assessment content\");\n});\n\ntest(\"02: Out of order sections\", () => {\n  const text = loadFixture(\"02-out-of-order.txt\");\n  const result = parseNote(text);\n\n  assertGreater(result.confidence, 0.6, \"confidence\");\n  assert(result.data.plan, \"has plan\");\n  assert(result.data.subjective, \"has subjective (HPI)\");\n  assert(result.data.assessment, \"has assessment (impression)\");\n  assert(result.data.vitals.hr, \"extracted HR\");\n  assert(result.data.vitals.bp, \"extracted BP\");\n});\n\ntest(\"03: Synonym headers\", () => {\n  const text = loadFixture(\"03-synonyms.txt\");\n  const result = parseNote(text);\n\n  assertGreater(result.confidence, 0.6, \"confidence\");\n  assert(result.data.subjective, \"HPI mapped to subjective\");\n  assert(result.data.objective, \"Exam mapped to objective\");\n  assert(result.data.assessment, \"Impression mapped to assessment\");\n  assert(result.data.plan, \"Recommendations mapped to plan\");\n  assertIncludes(result.data.assessment, \"heart failure\", \"assessment content\");\n});\n\ntest(\"04: All caps text\", () => {\n  const text = loadFixture(\"04-all-caps.txt\");\n  const result = parseNote(text);\n\n  assertGreater(result.confidence, 0.6, \"confidence\");\n  assert(result.data.subjective, \"has subjective\");\n  assert(result.data.vitals.bp, \"extracted BP from caps\");\n  assertIncludes(\n    result.data.assessment.toLowerCase(),\n    \"hypertensive\",\n    \"assessment\",\n  );\n  assertIncludes(result.data.plan.toLowerCase(), \"clonidine\", \"plan\");\n});\n\ntest(\"05: No plan section\", () => {\n  const text = loadFixture(\"05-no-plan.txt\");\n  const result = parseNote(text);\n\n  assert(result.warnings.length > 0, \"has warnings\");\n  assert(result.data.subjective, \"has subjective\");\n  assert(result.data.assessment, \"has assessment\");\n  assert(result.data.patient.mrn, \"extracted MRN\");\n  assert(result.data.patient.dob, \"extracted DOB\");\n});\n\ntest(\"06: Inline vitals without headers\", () => {\n  const text = loadFixture(\"06-inline-vitals.txt\");\n  const result = parseNote(text);\n\n  assertGreater(result.confidence, 0.5, \"confidence\");\n  assert(result.data.vitals.bp, \"extracted inline BP\");\n  assert(result.data.vitals.hr, \"extracted inline HR\");\n  assertGreater(result.data.vitals.hr, 90, \"HR value correct\");\n  assert(result.data.patient.age === 58, \"extracted age\");\n  assert(result.data.patient.gender === \"female\", \"extracted gender\");\n});\n\ntest(\"07: Mixed bullets and paragraphs\", () => {\n  const text = loadFixture(\"07-bullets-vs-paragraphs.txt\");\n  const result = parseNote(text);\n\n  assertGreater(result.confidence, 0.6, \"confidence\");\n  assert(result.data.subjective, \"has subjective\");\n  assert(result.data.objective, \"has objective\");\n  assert(result.data.assessment, \"has assessment\");\n  assert(result.data.plan, \"has plan\");\n  assert(result.data.patient.age === 71, \"extracted age from bullets\");\n});\n\ntest(\"08: Unicode quotes and special chars\", () => {\n  const text = loadFixture(\"08-unicode-quotes.txt\");\n  const normalized = normalize(text);\n\n  // Should convert smart quotes to ASCII\n  assert(!normalized.includes(\"\\u201C\"), \"no smart left double quote\");\n  assert(!normalized.includes(\"\\u201D\"), \"no smart right double quote\");\n  assert(!normalized.includes(\"\\u2014\"), \"no em dash\");\n  assert(normalized.includes('\"'), \"has ASCII double quote\");\n\n  const result = parseNote(text);\n  assertGreater(result.confidence, 0.5, \"confidence\");\n  assert(result.data.vitals.bp, \"extracted vitals\");\n});\n\ntest(\"09: Excessive whitespace\", () => {\n  const text = loadFixture(\"09-extra-whitespace.txt\");\n  const result = parseNote(text);\n\n  assertGreater(result.confidence, 0.6, \"confidence\");\n  assert(result.data.subjective, \"has subjective\");\n  assert(result.data.vitals.hr, \"extracted HR\");\n  assert(result.data.vitals.hr === 142, \"HR value correct\");\n  assertIncludes(result.data.assessment, \"atrial fibrillation\", \"assessment\");\n});\n\ntest(\"10: Minimal note\", () => {\n  const text = loadFixture(\"10-minimal-note.txt\");\n  const result = parseNote(text);\n\n  assert(result.warnings.length > 0, \"has warnings for minimal data\");\n  assert(result.data.patient.age === 80, \"extracted age\");\n  assert(result.data.patient.gender === \"male\", \"extracted gender\");\n  assert(result.data.vitals.hr === 38, \"extracted HR\");\n  assert(result.confidence < 0.7, \"low confidence for minimal note\");\n  assert(result.confidence > 0, \"non-zero confidence\");\n});\n\n// === UNIT TESTS ===\n\ntest(\"normalize() collapses whitespace\", () => {\n  const input = \"Hello    world\\n\\n\\n\\nNext   paragraph\";\n  const output = normalize(input);\n  assert(!output.includes(\"    \"), \"no quad spaces\");\n  assert(!output.includes(\"\\n\\n\\n\"), \"no triple newlines\");\n});\n\ntest(\"normalize() converts smart quotes\", () => {\n  const input = \"Patient states \\u201cI\\u2019m fine\\u201d\";\n  const output = normalize(input);\n  assert(output.includes('\"'), \"has ASCII double quote\");\n  assert(output.includes(\"'\"), \"has ASCII single quote\");\n});\n\ntest(\"extractVitals() handles various formats\", () => {\n  const text1 = \"BP 120/80 HR 72 RR 16 Temp 98.6F SpO2 98%\";\n  const vitals1 = extractVitals(text1);\n  assert(vitals1.bp === \"120/80\", \"BP extracted\");\n  assert(vitals1.hr === 72, \"HR extracted\");\n  assert(vitals1.rr === 16, \"RR extracted\");\n  assert(vitals1.temp === 98.6, \"Temp extracted\");\n  assert(vitals1.spo2 === 98, \"SpO2 extracted\");\n\n  const text2 = \"Blood pressure: 140/90, heart rate:88\";\n  const vitals2 = extractVitals(text2);\n  assert(vitals2.bp === \"140/90\", \"BP with label\");\n  assert(vitals2.hr === 88, \"HR with label\");\n});\n\ntest(\"extractMeds() handles delimiters\", () => {\n  const text = \"Aspirin 81mg daily; Metoprolol 25mg BID\\nLisinopril 10mg daily\";\n  const meds = extractMeds(text);\n  assert(meds.length === 3, \"extracted 3 meds\");\n  assert(meds.includes(\"Aspirin 81mg daily\"), \"has aspirin\");\n});\n\ntest(\"scoreMatch() finds synonyms\", () => {\n  const match1 = scoreMatch(\"HPI\");\n  assert(match1.canonical === \"subjective\", \"HPI -> subjective\");\n  assert(match1.score >= 0.9, \"high score\");\n\n  const match2 = scoreMatch(\"Assessment/Plan\");\n  assert(\n    match2.canonical === \"plan\" || match2.canonical === \"assessment\",\n    \"A/P maps correctly\",\n  );\n\n  const match3 = scoreMatch(\"VITAL SIGNS\");\n  assert(match3.canonical === \"vitals\", \"caps handled\");\n});\n\ntest(\"fallbackParse() handles completely unstructured text\", () => {\n  const text = \"Patient has chest pain. BP is 140/90.\";\n  const result = fallbackParse(text);\n\n  assert(result.data, \"returns data\");\n  assert(result.warnings.length > 0, \"has warnings\");\n  assert(result.confidence >= 0, \"has confidence score\");\n});\n\n// === EDGE CASES ===\n\ntest(\"parseNote() handles empty input\", () => {\n  const result = parseNote(\"\");\n  assert(result.confidence === 0, \"zero confidence\");\n  assert(result.warnings.length > 0, \"has warnings\");\n});\n\ntest(\"parseNote() handles null input\", () => {\n  const result = parseNote(null);\n  assert(result.confidence === 0, \"zero confidence\");\n});\n\ntest(\"parseNote() handles very short input\", () => {\n  const result = parseNote(\"Hi\");\n  assert(result.confidence < 0.3, \"low confidence\");\n  assert(result.warnings.length > 0, \"has warnings\");\n});\n\n// === RESULTS ===\n\nconsole.log(`\\n📊 Test Results: ${passed} passed, ${failed} failed`);\n\nif (failed > 0) {\n  process.exit(1);\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/tests/smoke-parsing.spec.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":40,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":45,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":48,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":49,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":49,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":54,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":55,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":56,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":100,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":101,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":107,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":107,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":108,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":112,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":121,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":121,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":122,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":122,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":126,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":126,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":133,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":133,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":134,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":134,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":138,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":138,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":153,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":153,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":157,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":157,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":164,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":164,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":166,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":166,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":179,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":179,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":180,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":180,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":184,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":184,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":185,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":185,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":195,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":195,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":196,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":196,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":200,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":200,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":201,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":201,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":215,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":215,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":216,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":216,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":220,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":221,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":221,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":241,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":241,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":242,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":242,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":248,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":248,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":249,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":249,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":267,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":267,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":268,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":268,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":273,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":273,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":275,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":275,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":276,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":276,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":278,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":278,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":283,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":283,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":284,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":284,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":288,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":288,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":298,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":298,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":299,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":299,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":302,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":302,"endColumn":9}],"suppressedMessages":[],"errorCount":50,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Smoke Tests for Note Parsing Flow\n * Tests core parsing functions with minimal input\n */\n\n// Simple test framework (no external dependencies)\nconst tests = [];\nlet passed = 0;\nlet failed = 0;\n\nfunction test(name, fn) {\n  tests.push({ name, fn });\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || \"Assertion failed\");\n  }\n}\n\nfunction assertIncludes(text, substring, message) {\n  if (!text || !text.includes(substring)) {\n    throw new Error(message || `Expected text to include \"${substring}\"`);\n  }\n}\n\nfunction assertNotNull(value, message) {\n  if (value === null || value === undefined) {\n    throw new Error(message || \"Expected value to not be null/undefined\");\n  }\n}\n\nfunction assertType(value, type, message) {\n  if (typeof value !== type) {\n    throw new Error(message || `Expected type ${type}, got ${typeof value}`);\n  }\n}\n\nasync function runTests() {\n  console.log(\"🧪 Running Smoke Tests for Note Parsing\\n\");\n\n  for (const test of tests) {\n    try {\n      await test.fn();\n      console.log(`✅ PASS: ${test.name}`);\n      passed++;\n    } catch (error) {\n      console.error(`❌ FAIL: ${test.name}`);\n      console.error(`   ${error.message}`);\n      failed++;\n    }\n  }\n\n  console.log(\"\\n\" + \"=\".repeat(50));\n  console.log(`Results: ${passed} passed, ${failed} failed`);\n  console.log(\"=\".repeat(50));\n\n  return failed === 0;\n}\n\n// ============================================================================\n// TEST DATA\n// ============================================================================\n\nconst MINIMAL_CLINICAL_NOTE = `\nChief Complaint: Chest pain\n\nHistory of Present Illness:\nPatient is a 65-year-old male with a history of hypertension who presents with chest pain.\nPain started 2 hours ago, described as pressure-like, radiating to left arm.\n\nVitals:\nBP: 150/90\nHR: 88\nRR: 16\nSpO2: 98% on RA\n\nAssessment:\n1. Chest pain, likely angina\n2. Hypertension\n\nPlan:\n1. EKG\n2. Troponin\n3. Start aspirin 325mg\n4. Cardiology consult\n`;\n\nconst MINIMAL_HPI = `\n65-year-old male with hypertension presents with chest pain for 2 hours.\nPain is pressure-like, radiating to left arm.\n`;\n\n// ============================================================================\n// TESTS\n// ============================================================================\n\ntest(\"Parser functions are available\", () => {\n  assert(\n    typeof window.parseClinicalNoteFull === \"function\" ||\n      typeof window.parseClinicalNote === \"function\",\n    \"At least one parser function must be available\",\n  );\n});\n\ntest(\"parseClinicalNoteFull returns valid structure\", () => {\n  if (typeof window.parseClinicalNoteFull !== \"function\") {\n    console.log(\"   ⏭️  SKIP: parseClinicalNoteFull not available\");\n    return;\n  }\n\n  const result = window.parseClinicalNoteFull(MINIMAL_CLINICAL_NOTE);\n\n  assertNotNull(result, \"Parser should return a value\");\n  assertType(result, \"object\", \"Parser should return an object\");\n  assert(result.sections, \"Result should have sections property\");\n  assert(result.fullText, \"Result should have fullText property\");\n});\n\ntest(\"parseClinicalNote returns valid structure\", () => {\n  if (typeof window.parseClinicalNote !== \"function\") {\n    console.log(\"   ⏭️  SKIP: parseClinicalNote not available\");\n    return;\n  }\n\n  const result = window.parseClinicalNote(MINIMAL_CLINICAL_NOTE);\n\n  assertNotNull(result, \"Parser should return a value\");\n  assertType(result, \"object\", \"Parser should return an object\");\n});\n\ntest(\"Parsed data contains expected sections\", () => {\n  if (typeof window.parseClinicalNoteFull !== \"function\") {\n    console.log(\"   ⏭️  SKIP: parseClinicalNoteFull not available\");\n    return;\n  }\n\n  const result = window.parseClinicalNoteFull(MINIMAL_CLINICAL_NOTE);\n\n  assert(result.sections, \"Should have sections object\");\n\n  // Check for common sections\n  const sections = result.sections;\n  const hasCCOrHPI =\n    sections[\"Chief Complaint\"] ||\n    sections[\"HPI\"] ||\n    sections[\"History of Present Illness\"];\n  assert(hasCCOrHPI, \"Should parse Chief Complaint or HPI\");\n});\n\ntest(\"TemplateRenderer is initialized\", () => {\n  assertNotNull(\n    window.templateRenderer,\n    \"TemplateRenderer should be initialized\",\n  );\n  assertType(\n    window.templateRenderer,\n    \"object\",\n    \"TemplateRenderer should be an object\",\n  );\n});\n\ntest(\"TemplateRenderer can process HPI\", () => {\n  assertNotNull(window.templateRenderer, \"TemplateRenderer must be available\");\n\n  const renderer = window.templateRenderer;\n  assert(\n    typeof renderer.generateFullNoteFromHPI === \"function\",\n    \"generateFullNoteFromHPI should exist\",\n  );\n\n  const result = renderer.generateFullNoteFromHPI(MINIMAL_HPI);\n\n  assertNotNull(result, \"Should return processed data\");\n  assertType(result, \"object\", \"Should return an object\");\n});\n\ntest(\"TemplateRenderer can normalize sections\", () => {\n  if (typeof window.parseClinicalNoteFull !== \"function\") {\n    console.log(\"   ⏭️  SKIP: parseClinicalNoteFull not available\");\n    return;\n  }\n\n  const parsed = window.parseClinicalNoteFull(MINIMAL_CLINICAL_NOTE);\n  const renderer = window.templateRenderer;\n\n  const { normalized, unmapped } = renderer.normalizeSections(parsed);\n\n  assertNotNull(normalized, \"Should return normalized sections\");\n  assertType(normalized, \"object\", \"Normalized should be an object\");\n  assertType(unmapped, \"object\", \"Unmapped should be an object\");\n});\n\ntest(\"TemplateRenderer can render CIS template\", () => {\n  if (typeof window.parseClinicalNoteFull !== \"function\") {\n    console.log(\"   ⏭️  SKIP: parseClinicalNoteFull not available\");\n    return;\n  }\n\n  const parsed = window.parseClinicalNoteFull(MINIMAL_CLINICAL_NOTE);\n  const renderer = window.templateRenderer;\n\n  const { normalized } = renderer.normalizeSections(parsed);\n  renderer.normalizedSections = normalized;\n  renderer.currentTemplate = \"cis\";\n\n  const output = renderer.renderTemplate(\"cis\");\n\n  assertNotNull(output, \"Should return rendered output\");\n  assertType(output, \"string\", \"Output should be a string\");\n  assert(output.length > 0, \"Output should not be empty\");\n});\n\ntest(\"Rendered output includes key sections\", () => {\n  if (typeof window.parseClinicalNoteFull !== \"function\") {\n    console.log(\"   ⏭️  SKIP: parseClinicalNoteFull not available\");\n    return;\n  }\n\n  const parsed = window.parseClinicalNoteFull(MINIMAL_CLINICAL_NOTE);\n  const renderer = window.templateRenderer;\n\n  const { normalized } = renderer.normalizeSections(parsed);\n  renderer.normalizedSections = normalized;\n  renderer.parsedData = parsed;\n  renderer.currentTemplate = \"cis\";\n\n  const output = renderer.renderTemplate(\"cis\");\n\n  // Check for expected content markers\n  assertIncludes(\n    output,\n    \"History of Present Illness\",\n    \"Should include HPI section label\",\n  );\n  assertIncludes(output, \"Assessment\", \"Should include Assessment section\");\n  assertIncludes(output, \"Plan\", \"Should include Plan section\");\n});\n\ntest(\"Full end-to-end processing\", () => {\n  if (typeof window.parseClinicalNoteFull !== \"function\") {\n    console.log(\"   ⏭️  SKIP: parseClinicalNoteFull not available\");\n    return;\n  }\n\n  // Simulate full flow\n  const text = MINIMAL_CLINICAL_NOTE;\n  const parsed = window.parseClinicalNoteFull(text);\n  const renderer = window.templateRenderer;\n\n  renderer.parsedData = parsed;\n  const { normalized, unmapped } = renderer.normalizeSections(parsed);\n  renderer.normalizedSections = normalized;\n  renderer.unmappedContent = unmapped;\n\n  const output = renderer.renderTemplate();\n\n  assertNotNull(output, \"Should produce output\");\n  assertType(output, \"string\", \"Output should be string\");\n  assert(output.length > 100, \"Output should have substantial content\");\n\n  // Verify key patient info would be included\n  assertIncludes(output, \"Plan:\", \"Should include Plan section\");\n});\n\ntest(\"Error handling: null input\", () => {\n  if (typeof window.parseClinicalNoteFull !== \"function\") {\n    console.log(\"   ⏭️  SKIP: parseClinicalNoteFull not available\");\n    return;\n  }\n\n  try {\n    window.parseClinicalNoteFull(null);\n    // If no error thrown, that's okay - just check it doesn't crash\n    console.log(\"   ℹ️  Parser accepts null without throwing\");\n  } catch (error) {\n    // Error is acceptable behavior\n    console.log(\"   ℹ️  Parser throws error for null input (expected)\");\n  }\n});\n\ntest(\"Error handling: empty string\", () => {\n  if (typeof window.parseClinicalNoteFull !== \"function\") {\n    console.log(\"   ⏭️  SKIP: parseClinicalNoteFull not available\");\n    return;\n  }\n\n  const result = window.parseClinicalNoteFull(\"\");\n  assertNotNull(result, \"Should handle empty string gracefully\");\n});\n\n// ============================================================================\n// TEST RUNNER\n// ============================================================================\n\nif (typeof window !== \"undefined\") {\n  // Browser environment\n  window.runSmokeTests = runTests;\n  console.log(\"💡 Smoke tests loaded. Run with: window.runSmokeTests()\");\n} else if (typeof module !== \"undefined\") {\n  // Node.js environment\n  module.exports = { runTests };\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/tests/svg-sanitizer.spec.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":15,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":22,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'beforeEach' is not defined.","line":25,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":27,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":28,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":31,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":31,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":32,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":32,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'afterEach' is not defined.","line":35,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":37,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":40,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":41,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":41,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":47,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":47,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":48,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":51,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":51,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":57,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":57,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":60,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":60,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":66,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":67,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":70,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":76,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":76,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":77,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":77,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":80,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":80,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":86,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":86,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":87,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":87,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":90,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":96,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":96,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":99,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":99,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":100,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":105,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":105,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":109,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":109,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":110,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":121,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":121,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":122,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":122,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":123,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":123,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":124,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":124,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":127,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":127,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":136,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":136,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":140,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":140,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":141,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":141,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":147,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":147,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":152,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":152,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":156,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":156,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":161,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":161,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":162,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":162,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":169,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":169,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":173,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":173,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":174,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":174,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":180,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":180,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":181,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":181,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":189,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":189,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":190,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":190,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":192,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":192,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":192,"column":42,"nodeType":"Identifier","messageId":"undef","endLine":192,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'bbox' is assigned a value but never used.","line":202,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":202,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"bbox"},"fix":{"range":[5723,5752],"text":""},"desc":"Remove unused variable 'bbox'."}]},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":212,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":212,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":222,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":222,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":223,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":223,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":225,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":225,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":225,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":225,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":245,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":245,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":258,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":258,"endColumn":11}],"suppressedMessages":[],"errorCount":63,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SVG ViewBox Sanitizer Tests\n *\n * Tests that invalid viewBox attributes are detected and fixed\n */\n\nimport {\n  sanitizeSVGViewBox,\n  sanitizeAllSVGs,\n  installSVGSanitizer,\n} from '../src/utils/svgSanitizer.js';\n\n// Mock DOM environment\nfunction createTestSVG(viewBox) {\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  if (viewBox !== undefined) {\n    svg.setAttribute('viewBox', viewBox);\n  }\n  return svg;\n}\n\ndescribe('SVG ViewBox Sanitizer', () => {\n  let container;\n\n  beforeEach(() => {\n    // Create clean container for each test\n    container = document.createElement('div');\n    document.body.appendChild(container);\n\n    // Suppress console.info/warn during tests\n    jest.spyOn(console, 'info').mockImplementation(() => {});\n    jest.spyOn(console, 'warn').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    container.remove();\n    jest.restoreAllMocks();\n  });\n\n  describe('sanitizeSVGViewBox()', () => {\n    test('should fix viewBox with percentage values', () => {\n      const svg = createTestSVG('0 0 100% 4');\n      container.appendChild(svg);\n\n      const result = sanitizeSVGViewBox(svg);\n\n      expect(result).toBe(true);\n      expect(svg.getAttribute('viewBox')).toBe('0 0 100 4');\n    });\n\n    test('should fix viewBox with multiple percentage values', () => {\n      const svg = createTestSVG('0% 0% 100% 100%');\n      container.appendChild(svg);\n\n      sanitizeSVGViewBox(svg);\n\n      expect(svg.getAttribute('viewBox')).toBe('0 0 100 100');\n    });\n\n    test('should not modify valid numeric viewBox', () => {\n      const svg = createTestSVG('0 0 24 24');\n      container.appendChild(svg);\n\n      const result = sanitizeSVGViewBox(svg);\n\n      expect(result).toBe(false);\n      expect(svg.getAttribute('viewBox')).toBe('0 0 24 24');\n    });\n\n    test('should handle viewBox with decimals', () => {\n      const svg = createTestSVG('0 0 23.5 24.8');\n      container.appendChild(svg);\n\n      const result = sanitizeSVGViewBox(svg);\n\n      expect(result).toBe(false);\n      expect(svg.getAttribute('viewBox')).toBe('0 0 23.5 24.8');\n    });\n\n    test('should handle negative values', () => {\n      const svg = createTestSVG('-10 -10 100 100');\n      container.appendChild(svg);\n\n      const result = sanitizeSVGViewBox(svg);\n\n      expect(result).toBe(false);\n      expect(svg.getAttribute('viewBox')).toBe('-10 -10 100 100');\n    });\n\n    test('should handle SVG without viewBox', () => {\n      const svg = createTestSVG();\n      container.appendChild(svg);\n\n      const result = sanitizeSVGViewBox(svg);\n\n      expect(result).toBe(false);\n    });\n\n    test('should return false for non-SVG elements', () => {\n      const div = document.createElement('div');\n      div.setAttribute('viewBox', '0 0 100% 4');\n\n      const result = sanitizeSVGViewBox(div);\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('sanitizeAllSVGs()', () => {\n    test('should sanitize multiple SVGs in document', () => {\n      const svg1 = createTestSVG('0 0 100% 4');\n      const svg2 = createTestSVG('0 0 50% 50%');\n      const svg3 = createTestSVG('0 0 24 24'); // Valid\n\n      container.appendChild(svg1);\n      container.appendChild(svg2);\n      container.appendChild(svg3);\n\n      const count = sanitizeAllSVGs(container);\n\n      expect(count).toBe(2);\n      expect(svg1.getAttribute('viewBox')).toBe('0 0 100 4');\n      expect(svg2.getAttribute('viewBox')).toBe('0 0 50 50');\n      expect(svg3.getAttribute('viewBox')).toBe('0 0 24 24');\n    });\n\n    test('should return 0 when no SVGs need sanitization', () => {\n      const svg1 = createTestSVG('0 0 24 24');\n      const svg2 = createTestSVG('0 0 100 100');\n\n      container.appendChild(svg1);\n      container.appendChild(svg2);\n\n      const count = sanitizeAllSVGs(container);\n\n      expect(count).toBe(0);\n    });\n  });\n\n  describe('installSVGSanitizer()', () => {\n    test('should sanitize existing SVGs on install', () => {\n      const svg = createTestSVG('0 0 100% 4');\n      container.appendChild(svg);\n\n      const observer = installSVGSanitizer(container);\n\n      expect(svg.getAttribute('viewBox')).toBe('0 0 100 4');\n\n      observer.disconnect();\n    });\n\n    test('should sanitize dynamically added SVGs', (done) => {\n      const observer = installSVGSanitizer(container);\n\n      // Add SVG after observer is installed\n      setTimeout(() => {\n        const svg = createTestSVG('0 0 100% 4');\n        container.appendChild(svg);\n\n        // Wait for mutation observer\n        setTimeout(() => {\n          expect(svg.getAttribute('viewBox')).toBe('0 0 100 4');\n          observer.disconnect();\n          done();\n        }, 50);\n      }, 10);\n    });\n\n    test('should sanitize SVGs in added subtrees', (done) => {\n      const observer = installSVGSanitizer(container);\n\n      // Add container with SVG inside\n      setTimeout(() => {\n        const wrapper = document.createElement('div');\n        const svg = createTestSVG('0 0 100% 4');\n        wrapper.appendChild(svg);\n        container.appendChild(wrapper);\n\n        // Wait for mutation observer\n        setTimeout(() => {\n          expect(svg.getAttribute('viewBox')).toBe('0 0 100 4');\n          observer.disconnect();\n          done();\n        }, 50);\n      }, 10);\n    });\n  });\n\n  describe('Console Error Detection', () => {\n    test('should not produce viewBox console errors after sanitization', () => {\n      // Spy on console.error\n      const consoleErrorSpy = jest.spyOn(console, 'error');\n\n      // Create SVG with invalid viewBox\n      const svg = createTestSVG('0 0 100% 4');\n      container.appendChild(svg);\n\n      // Sanitize\n      sanitizeSVGViewBox(svg);\n\n      // Try to use the SVG (this would normally trigger errors)\n      const bbox = svg.getBBox?.(); // getBBox might not work in JSDOM\n\n      // Check that no errors matching the viewBox pattern were logged\n      const viewBoxErrors = consoleErrorSpy.mock.calls.filter(\n        (call) =>\n          call.some((arg) =>\n            String(arg).match(/viewBox.*Expected number|attribute viewBox/i)\n          )\n      );\n\n      expect(viewBoxErrors).toHaveLength(0);\n\n      consoleErrorSpy.mockRestore();\n    });\n  });\n});\n\n/**\n * Integration test: Mount UI and assert no viewBox errors\n */\ndescribe('UI Integration - No ViewBox Errors', () => {\n  test('should mount full UI without viewBox console errors', () => {\n    // Spy on console.error\n    const consoleErrorSpy = jest.spyOn(console, 'error');\n\n    // Load the main HTML content (simulate mounting the app)\n    const testHTML = `\n      <!DOCTYPE html>\n      <html>\n        <body>\n          <div id=\"app\">\n            <svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n              <path d=\"M12 2L2 7l10 5 10-5-10-5z\"/>\n            </svg>\n            <svg viewBox=\"0 0 100 100\" width=\"32\" height=\"32\">\n              <circle cx=\"50\" cy=\"50\" r=\"40\"/>\n            </svg>\n          </div>\n        </body>\n      </html>\n    `;\n\n    // Parse and mount\n    document.body.innerHTML = testHTML;\n\n    // Run sanitizer\n    sanitizeAllSVGs();\n\n    // Check for viewBox-related errors\n    const viewBoxErrors = consoleErrorSpy.mock.calls.filter(\n      (call) =>\n        call.some((arg) =>\n          String(arg).match(/viewBox.*Expected number|attribute viewBox/i)\n        )\n    );\n\n    expect(viewBoxErrors).toHaveLength(0);\n\n    consoleErrorSpy.mockRestore();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/tests/test_large_note.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":115,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":115,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":120,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":120,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":121,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":121,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":122,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":122,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":123,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":123,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":124,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":124,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":125,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":125,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":126,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":126,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":127,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":127,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":128,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":128,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":129,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":129,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":130,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":130,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":131,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":131,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":132,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":132,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":133,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":133,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":134,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":134,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":135,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":135,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":136,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":136,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":137,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":137,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":138,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":138,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":139,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":139,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":140,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":140,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":146,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":146,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":147,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":147,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":152,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":152,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'testNote' is assigned a value but never used.","line":156,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":156,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":157,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":157,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":158,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":158,"endColumn":8}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test file for large clinical note processing\n * Tests performance improvements for freezing issues with large notes\n */\n\n// Generate a large clinical note for testing (>20k characters)\nconst generateLargeNote = () => {\n  const hpi = `\nHistory of Present Illness:\nMr. John Smith is a 68-year-old male with a past medical history significant for coronary artery disease status post CABG x3 (LIMA to LAD, SVG to OM, SVG to PDA) performed in 2018, hypertension, hyperlipidemia, type 2 diabetes mellitus, chronic kidney disease stage 3, atrial fibrillation on anticoagulation, and congestive heart failure with reduced ejection fraction (EF 35% on most recent echo 3 months ago) who presents to the emergency department today with complaints of worsening shortness of breath and bilateral lower extremity edema over the past 5-7 days.\n\nThe patient reports that he has been generally doing well since his last hospitalization 6 months ago for acute decompensated heart failure. However, approximately one week prior to presentation, he began noticing increased dyspnea on exertion. Initially, he could walk approximately 2-3 blocks before becoming short of breath, but over the past few days, he has difficulty walking from his bedroom to the bathroom without having to stop and catch his breath. He denies any chest pain, but does report some mild pressure sensation in his chest with exertion that resolves with rest. He also notes orthopnea (now requiring 3 pillows to sleep, up from his baseline of 1 pillow) and paroxysmal nocturnal dyspnea, waking up 2-3 times per night feeling like he cannot breathe.\n\nAdditionally, the patient has noticed progressive bilateral lower extremity swelling over the same timeframe. He states his ankles and feet have become increasingly swollen, and he can no longer fit into his regular shoes. He has been wearing slippers for the past 3 days. The edema extends up to his mid-shins bilaterally and leaves significant pitting when pressed. He denies any leg pain, redness, or warmth that would suggest DVT or cellulitis.\n\nThe patient admits to dietary indiscretion over the past 2 weeks, including consuming multiple canned soups, deli meats, and eating out at restaurants more frequently than usual due to having family visiting from out of town. He has been checking his weight daily at home and notes a 12-pound weight gain over the past 10 days (from his baseline of 185 lbs to current 197 lbs). He has been compliant with his medications, including his diuretic regimen (furosemide 40mg twice daily), but states \"it doesn't seem to be working like it used to.\"\n\nReview of his home medications shows he is currently taking: aspirin 81mg daily, clopidogrel 75mg daily, metoprolol succinate 200mg daily, lisinopril 20mg daily, atorvastatin 80mg daily, furosemide 40mg twice daily, spironolactone 25mg daily, apixaban 5mg twice daily, metformin 1000mg twice daily, and glipizide 10mg daily.\n\nHe denies any fever, chills, cough, sputum production, hemoptysis, recent upper respiratory infection symptoms, nausea, vomiting, diarrhea, abdominal pain, or urinary symptoms. He has not had any recent medication changes. He denies any recent travel or sick contacts. He continues to follow up regularly with his primary care physician and cardiologist.\n\nHis most recent labs from 2 weeks ago showed: creatinine 1.8 mg/dL (baseline 1.6-1.8), BUN 42 mg/dL, sodium 138 mEq/L, potassium 4.2 mEq/L, hemoglobin 11.2 g/dL (stable anemia, chronic disease), and BNP 1450 pg/mL (up from 800 at his last check 3 months ago).\n\nPast Medical History:\n1. Coronary artery disease - CABG x3 in 2018 (LIMA to LAD, SVG to OM, SVG to PDA)\n2. Prior myocardial infarction - anterior STEMI in 2017, treated with primary PCI to LAD\n3. Systolic heart failure - ischemic cardiomyopathy with EF 35%\n4. Atrial fibrillation - paroxysmal, on anticoagulation, CHA2DS2-VASc score of 5\n5. Hypertension - diagnosed 15 years ago\n6. Hyperlipidemia - on high-intensity statin therapy\n7. Type 2 diabetes mellitus - diagnosed 10 years ago, HbA1c 7.2% 3 months ago\n8. Chronic kidney disease stage 3 - baseline creatinine 1.6-1.8 mg/dL\n9. Anemia of chronic disease - baseline hemoglobin 11-12 g/dL\n10. Peripheral vascular disease - s/p right femoral-popliteal bypass 2019\n11. Hypothyroidism - on levothyroxine replacement\n\nPast Surgical History:\n1. CABG x3 (2018)\n2. Primary PCI to LAD with drug-eluting stent placement (2017)\n3. Right femoral-popliteal bypass (2019)\n4. Cholecystectomy (2010)\n5. Right inguinal hernia repair (2015)\n\nFamily History:\nFather deceased at age 62 from myocardial infarction. Mother deceased at age 75 from stroke. Brother age 70 with history of coronary artery disease and hypertension. Sister age 65 with diabetes mellitus type 2. No family history of sudden cardiac death, cardiomyopathy, or arrhythmias at young age.\n\nSocial History:\nThe patient is a retired construction worker. He is married and lives with his wife in a single-story home. He has good family support. He quit smoking 8 years ago after his heart attack but has a 40 pack-year smoking history. He denies current tobacco use. He drinks alcohol occasionally, approximately 1-2 beers per week. He denies any illicit drug use. He is able to perform most activities of daily living independently but requires assistance with heavy housework and yard work.\n\nMedications (as listed above):\n- Aspirin 81mg PO daily\n- Clopidogrel 75mg PO daily\n- Metoprolol succinate 200mg PO daily\n- Lisinopril 20mg PO daily\n- Atorvastatin 80mg PO daily\n- Furosemide 40mg PO twice daily\n- Spironolactone 25mg PO daily\n- Apixaban 5mg PO twice daily\n- Metformin 1000mg PO twice daily\n- Glipizide 10mg PO daily\n- Levothyroxine 100mcg PO daily\n\nAllergies: No known drug allergies (NKDA)\n\nReview of Systems:\nConstitutional: Reports fatigue and decreased exercise tolerance. Denies fever, chills, or unintentional weight loss.\nCardiovascular: As per HPI - shortness of breath, orthopnea, PND, lower extremity edema. Denies chest pain at rest, palpitations, or syncope.\nRespiratory: Denies cough, wheezing, hemoptysis, or pleuritic chest pain.\nGastrointestinal: Denies nausea, vomiting, diarrhea, constipation, abdominal pain, melena, or hematochezia.\nGenitourinary: Denies dysuria, hematuria, or changes in urinary frequency. Notes good urine output.\nNeurological: Denies headache, dizziness, weakness, numbness, or changes in vision.\nMusculoskeletal: Denies joint pain or muscle aches beyond usual chronic back pain.\nSkin: Denies rashes, lesions, or skin changes.\n\nPhysical Examination:\nVital Signs: Temperature 98.2°F, Blood Pressure 142/88 mmHg, Heart Rate 88 bpm (irregularly irregular), Respiratory Rate 22/min, Oxygen Saturation 92% on room air, Weight 197 lbs (up from 185 lbs baseline)\n\nGeneral: Alert and oriented x3, mild respiratory distress, able to speak in full sentences but pausing occasionally to catch breath\n\nHEENT: Normocephalic, atraumatic. Pupils equal, round, reactive to light. Conjunctivae pale. Oropharynx clear without erythema or exudates. Mucous membranes moist.\n\nNeck: Jugular venous distension present to approximately 10 cm above the sternal angle at 45 degrees. No lymphadenopathy. Thyroid non-enlarged.\n\nCardiovascular: Irregularly irregular rhythm, normal S1 and S2. S3 gallop present. No murmurs or rubs appreciated. Bilateral lower extremity edema 3+ pitting to mid-shins. Pedal pulses 2+ bilaterally. No cyanosis.\n\nRespiratory: Tachypneic. Bilateral crackles heard in lower lung fields to mid-lung fields. No wheezing. Decreased breath sounds at bases bilaterally. No use of accessory muscles.\n\nAbdominal: Soft, mildly distended. Non-tender to palpation. Bowel sounds present in all quadrants. No hepatosplenomegaly appreciated, though liver edge palpable 2cm below costal margin. No rebound or guarding.\n\nExtremities: Warm, well-perfused. 3+ pitting edema bilaterally to mid-shins. No cyanosis or clubbing. Well-healed surgical scars on right leg from bypass surgery.\n\nNeurological: Alert and oriented to person, place, and time. Cranial nerves II-XII grossly intact. Motor strength 5/5 in all extremities. Sensation intact to light touch. Gait not assessed due to patient's respiratory distress.\n\nSkin: Warm and dry. No rashes or lesions noted. Good capillary refill.\n\nLaboratory Results:\nCBC: WBC 8.2 K/uL, Hemoglobin 10.8 g/dL, Hematocrit 32.1%, Platelets 245 K/uL\nBMP: Sodium 136 mEq/L, Potassium 4.5 mEq/L, Chloride 102 mEq/L, Bicarbonate 24 mEq/L, BUN 48 mg/dL, Creatinine 2.1 mg/dL (up from baseline 1.8), Glucose 156 mg/dL\nCardiac: Troponin I <0.01 ng/mL, BNP 2450 pg/mL (significantly elevated from 1450 two weeks ago)\nLiver: AST 35 U/L, ALT 42 U/L, Alkaline Phosphatase 88 U/L, Total Bilirubin 1.2 mg/dL, Albumin 3.4 g/dL\nCoagulation: PT 13.2 seconds, INR 1.1, PTT 32 seconds\nMagnesium 2.0 mEq/L, Phosphorus 3.8 mg/dL\n\nDiagnostic Studies:\nChest X-ray: Cardiomegaly with increased cardiac silhouette. Bilateral pleural effusions, moderate on right, small on left. Pulmonary vascular congestion with cephalization. No focal consolidation. No pneumothorax.\n\nECG: Atrial fibrillation with rapid ventricular response, rate 110-120 bpm. Left ventricular hypertrophy. Non-specific ST-T wave changes in lateral leads. Old Q waves in anterior leads consistent with prior myocardial infarction. No acute ST segment elevation or depression.\n`;\n\n  return hpi;\n};\n\n// Test function\nconst testLargeNoteProcessing = () => {\n  console.log('=== Large Note Processing Test ===\\n');\n\n  const largeNote = generateLargeNote();\n  const charCount = largeNote.length;\n\n  console.log(`✓ Generated test note: ${charCount} characters (~${Math.round(charCount/1000)}k)`);\n  console.log(`✓ Note is ${charCount > 20000 ? 'VERY LARGE (>20k)' : charCount > 10000 ? 'LARGE (>10k)' : 'MEDIUM'}`);\n  console.log('\\n--- Expected Behavior ---');\n  console.log('1. Progress messages should appear at each stage');\n  console.log('2. UI should remain responsive (no freezing)');\n  console.log('3. Adaptive delays based on note size should be applied');\n  console.log('4. UI yield points should prevent blocking');\n  console.log('\\n--- Test Note Content Preview ---');\n  console.log(largeNote.substring(0, 500) + '...\\n');\n  console.log('--- Labs Extraction Test ---');\n  console.log('Should extract: Creatinine 2.1, BUN 48, BNP 2450, Magnesium 2.0, Phosphorus 3.8, ALT 42, AST 35');\n  console.log('\\n--- Vitals Extraction Test ---');\n  console.log('Should extract: BP 142/88, HR 88 bpm, RR 22/min, O2 92% on room air, Temp 98.2°F');\n  console.log('\\n=== To run this test: ===');\n  console.log('1. Open the Cardiology Suite application in browser');\n  console.log('2. Paste the generated note into the input');\n  console.log('3. Click Parse and observe:');\n  console.log('   - Progress messages appearing');\n  console.log('   - UI remaining responsive');\n  console.log('   - All vitals and labs extracted correctly');\n  console.log('   - Processing completing without freezing');\n\n  return largeNote;\n};\n\n// Export for use in tests\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { generateLargeNote, testLargeNoteProcessing };\n}\n\n// Auto-run if loaded directly\nif (typeof window !== 'undefined') {\n  window.testLargeNote = testLargeNoteProcessing();\n}\n\n// Run test\nconst testNote = testLargeNoteProcessing();\nconsole.log('\\n✓ Test file created successfully');\nconsole.log('✓ Large note ready for testing');\n","usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/tests/unit/azureFileContext.node.spec.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/tests/unit/parseAzureNote.node.spec.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/CardiologySuiteApp_vNext/vite.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]